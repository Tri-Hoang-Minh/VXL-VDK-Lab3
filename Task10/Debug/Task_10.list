
Task_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c80  08002c80  00012c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca0  08002ca0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002ca0  08002ca0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ca0  08002ca0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca0  08002ca0  00012ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000078  08002d20  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002d20  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000909d  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001919  00000000  00000000  0002913e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002aa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168c9  00000000  00000000  0002be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000adec  00000000  00000000  000426f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082534  00000000  00000000  0004d4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfa19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002988  00000000  00000000  000cfa6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c68 	.word	0x08002c68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002c68 	.word	0x08002c68

0800014c <set_Time_RED>:
int time_period_run = TIME_PER_SECOND;            // SET OF jump to the interrupt service routine 250 time  => 250*2ms = 0.5s real time.
int timeRUN_LED7SEG_TRAFFICLIGHT=TIME_RUN7SEGMENT;
int timeRUN_LED7SEG_CONTROLLER=TIME_RUN7SEGMENT_EDIT;

void set_Time_RED(int timeRed)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    time_RED= timeRed;
 8000154:	4a03      	ldr	r2, [pc, #12]	; (8000164 <set_Time_RED+0x18>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	20000000 	.word	0x20000000

08000168 <set_Time_YELLOW>:
void set_Time_YELLOW(int timeYellow)
{
 8000168:	b480      	push	{r7}
 800016a:	b083      	sub	sp, #12
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
   time_YELLOW= timeYellow;
 8000170:	4a03      	ldr	r2, [pc, #12]	; (8000180 <set_Time_YELLOW+0x18>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	6013      	str	r3, [r2, #0]
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	20000008 	.word	0x20000008

08000184 <set_Time_GREEN>:
void set_Time_GREEN(int timeGreen)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
  time_GREEN= timeGreen;
 800018c:	4a03      	ldr	r2, [pc, #12]	; (800019c <set_Time_GREEN+0x18>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	6013      	str	r3, [r2, #0]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000004 	.word	0x20000004

080001a0 <setTime_ALL_LED_TRAFFIC>:
void setTime_ALL_LED_TRAFFIC()
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
      time_RED_TOP_BOTTOM=time_RED;
 80001a4:	4b0d      	ldr	r3, [pc, #52]	; (80001dc <setTime_ALL_LED_TRAFFIC+0x3c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a0d      	ldr	r2, [pc, #52]	; (80001e0 <setTime_ALL_LED_TRAFFIC+0x40>)
 80001aa:	6013      	str	r3, [r2, #0]
      time_RED_LEFT_RIGHT= time_RED;
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <setTime_ALL_LED_TRAFFIC+0x3c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a0c      	ldr	r2, [pc, #48]	; (80001e4 <setTime_ALL_LED_TRAFFIC+0x44>)
 80001b2:	6013      	str	r3, [r2, #0]

      time_YELLOW_TOP_BOTTOM=time_YELLOW;
 80001b4:	4b0c      	ldr	r3, [pc, #48]	; (80001e8 <setTime_ALL_LED_TRAFFIC+0x48>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a0c      	ldr	r2, [pc, #48]	; (80001ec <setTime_ALL_LED_TRAFFIC+0x4c>)
 80001ba:	6013      	str	r3, [r2, #0]
      time_YELLOW_LEFT_RIGHT= time_YELLOW;
 80001bc:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <setTime_ALL_LED_TRAFFIC+0x48>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <setTime_ALL_LED_TRAFFIC+0x50>)
 80001c2:	6013      	str	r3, [r2, #0]

      time_GREEN_TOP_BOTTOM=time_GREEN;
 80001c4:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <setTime_ALL_LED_TRAFFIC+0x54>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a0b      	ldr	r2, [pc, #44]	; (80001f8 <setTime_ALL_LED_TRAFFIC+0x58>)
 80001ca:	6013      	str	r3, [r2, #0]
      time_GREEN_LEFT_RIGHT= time_GREEN;
 80001cc:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <setTime_ALL_LED_TRAFFIC+0x54>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <setTime_ALL_LED_TRAFFIC+0x5c>)
 80001d2:	6013      	str	r3, [r2, #0]
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	20000000 	.word	0x20000000
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	20000018 	.word	0x20000018
 80001e8:	20000008 	.word	0x20000008
 80001ec:	20000010 	.word	0x20000010
 80001f0:	20000020 	.word	0x20000020
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000014 	.word	0x20000014
 80001fc:	2000001c 	.word	0x2000001c

08000200 <get_Time_RED>:
int get_Time_RED()
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  return time_RED;
 8000204:	4b02      	ldr	r3, [pc, #8]	; (8000210 <get_Time_RED+0x10>)
 8000206:	681b      	ldr	r3, [r3, #0]
}
 8000208:	4618      	mov	r0, r3
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20000000 	.word	0x20000000

08000214 <get_Time_YELLOW>:
int get_Time_YELLOW()
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
 return time_YELLOW;
 8000218:	4b02      	ldr	r3, [pc, #8]	; (8000224 <get_Time_YELLOW+0x10>)
 800021a:	681b      	ldr	r3, [r3, #0]
}
 800021c:	4618      	mov	r0, r3
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	20000008 	.word	0x20000008

08000228 <get_Time_GREEN>:
int get_Time_GREEN()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
 return time_GREEN;
 800022c:	4b02      	ldr	r3, [pc, #8]	; (8000238 <get_Time_GREEN+0x10>)
 800022e:	681b      	ldr	r3, [r3, #0]
}
 8000230:	4618      	mov	r0, r3
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	20000004 	.word	0x20000004

0800023c <ToggleSignal_TOP_BOTTOM_LED>:


void ToggleSignal_TOP_BOTTOM_LED(int index)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	switch(index)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d029      	beq.n	800029e <ToggleSignal_TOP_BOTTOM_LED+0x62>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2b02      	cmp	r3, #2
 800024e:	dc36      	bgt.n	80002be <ToggleSignal_TOP_BOTTOM_LED+0x82>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d003      	beq.n	800025e <ToggleSignal_TOP_BOTTOM_LED+0x22>
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d010      	beq.n	800027e <ToggleSignal_TOP_BOTTOM_LED+0x42>
	    	HAL_GPIO_WritePin( LED_RED_1_GPIO_Port, LED_RED_1_Pin, 1);
	    	HAL_GPIO_WritePin( LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, 1);
	    	HAL_GPIO_WritePin( LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, 0);       // LED GREEN ON
		break;
	    default:
	    break;
 800025c:	e02f      	b.n	80002be <ToggleSignal_TOP_BOTTOM_LED+0x82>
	    	HAL_GPIO_WritePin( LED_RED_1_GPIO_Port, LED_RED_1_Pin, 0);             // LED RED ON
 800025e:	2200      	movs	r2, #0
 8000260:	2102      	movs	r1, #2
 8000262:	4819      	ldr	r0, [pc, #100]	; (80002c8 <ToggleSignal_TOP_BOTTOM_LED+0x8c>)
 8000264:	f001 fcd7 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin( LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, 1);
 8000268:	2201      	movs	r2, #1
 800026a:	2104      	movs	r1, #4
 800026c:	4816      	ldr	r0, [pc, #88]	; (80002c8 <ToggleSignal_TOP_BOTTOM_LED+0x8c>)
 800026e:	f001 fcd2 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin( LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, 1);
 8000272:	2201      	movs	r2, #1
 8000274:	2108      	movs	r1, #8
 8000276:	4814      	ldr	r0, [pc, #80]	; (80002c8 <ToggleSignal_TOP_BOTTOM_LED+0x8c>)
 8000278:	f001 fccd 	bl	8001c16 <HAL_GPIO_WritePin>
		break;
 800027c:	e020      	b.n	80002c0 <ToggleSignal_TOP_BOTTOM_LED+0x84>
	    	HAL_GPIO_WritePin( LED_RED_1_GPIO_Port, LED_RED_1_Pin, 1);
 800027e:	2201      	movs	r2, #1
 8000280:	2102      	movs	r1, #2
 8000282:	4811      	ldr	r0, [pc, #68]	; (80002c8 <ToggleSignal_TOP_BOTTOM_LED+0x8c>)
 8000284:	f001 fcc7 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin( LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, 0);      // LED YELLOW ON
 8000288:	2200      	movs	r2, #0
 800028a:	2104      	movs	r1, #4
 800028c:	480e      	ldr	r0, [pc, #56]	; (80002c8 <ToggleSignal_TOP_BOTTOM_LED+0x8c>)
 800028e:	f001 fcc2 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin( LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, 1);
 8000292:	2201      	movs	r2, #1
 8000294:	2108      	movs	r1, #8
 8000296:	480c      	ldr	r0, [pc, #48]	; (80002c8 <ToggleSignal_TOP_BOTTOM_LED+0x8c>)
 8000298:	f001 fcbd 	bl	8001c16 <HAL_GPIO_WritePin>
		break;
 800029c:	e010      	b.n	80002c0 <ToggleSignal_TOP_BOTTOM_LED+0x84>
	    	HAL_GPIO_WritePin( LED_RED_1_GPIO_Port, LED_RED_1_Pin, 1);
 800029e:	2201      	movs	r2, #1
 80002a0:	2102      	movs	r1, #2
 80002a2:	4809      	ldr	r0, [pc, #36]	; (80002c8 <ToggleSignal_TOP_BOTTOM_LED+0x8c>)
 80002a4:	f001 fcb7 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin( LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, 1);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2104      	movs	r1, #4
 80002ac:	4806      	ldr	r0, [pc, #24]	; (80002c8 <ToggleSignal_TOP_BOTTOM_LED+0x8c>)
 80002ae:	f001 fcb2 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin( LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, 0);       // LED GREEN ON
 80002b2:	2200      	movs	r2, #0
 80002b4:	2108      	movs	r1, #8
 80002b6:	4804      	ldr	r0, [pc, #16]	; (80002c8 <ToggleSignal_TOP_BOTTOM_LED+0x8c>)
 80002b8:	f001 fcad 	bl	8001c16 <HAL_GPIO_WritePin>
		break;
 80002bc:	e000      	b.n	80002c0 <ToggleSignal_TOP_BOTTOM_LED+0x84>
	    break;
 80002be:	bf00      	nop
	}
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40010800 	.word	0x40010800

080002cc <ToggleSignal_LEFT_RIGHT_LED>:
void ToggleSignal_LEFT_RIGHT_LED(int index)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	switch(index)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d029      	beq.n	800032e <ToggleSignal_LEFT_RIGHT_LED+0x62>
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b02      	cmp	r3, #2
 80002de:	dc36      	bgt.n	800034e <ToggleSignal_LEFT_RIGHT_LED+0x82>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d003      	beq.n	80002ee <ToggleSignal_LEFT_RIGHT_LED+0x22>
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d010      	beq.n	800030e <ToggleSignal_LEFT_RIGHT_LED+0x42>
	    	HAL_GPIO_WritePin( LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 1);
	    	HAL_GPIO_WritePin( LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, 0);           // LED GREEN ON

		break;
	    default:
	    break;
 80002ec:	e02f      	b.n	800034e <ToggleSignal_LEFT_RIGHT_LED+0x82>
	    	HAL_GPIO_WritePin( LED_RED_2_GPIO_Port, LED_RED_2_Pin, 0);             // LED RED ON
 80002ee:	2200      	movs	r2, #0
 80002f0:	2110      	movs	r1, #16
 80002f2:	4819      	ldr	r0, [pc, #100]	; (8000358 <ToggleSignal_LEFT_RIGHT_LED+0x8c>)
 80002f4:	f001 fc8f 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin( LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 1);
 80002f8:	2201      	movs	r2, #1
 80002fa:	2120      	movs	r1, #32
 80002fc:	4816      	ldr	r0, [pc, #88]	; (8000358 <ToggleSignal_LEFT_RIGHT_LED+0x8c>)
 80002fe:	f001 fc8a 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin( LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, 1);
 8000302:	2201      	movs	r2, #1
 8000304:	2140      	movs	r1, #64	; 0x40
 8000306:	4814      	ldr	r0, [pc, #80]	; (8000358 <ToggleSignal_LEFT_RIGHT_LED+0x8c>)
 8000308:	f001 fc85 	bl	8001c16 <HAL_GPIO_WritePin>
		break;
 800030c:	e020      	b.n	8000350 <ToggleSignal_LEFT_RIGHT_LED+0x84>
	    	HAL_GPIO_WritePin( LED_RED_2_GPIO_Port, LED_RED_2_Pin, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2110      	movs	r1, #16
 8000312:	4811      	ldr	r0, [pc, #68]	; (8000358 <ToggleSignal_LEFT_RIGHT_LED+0x8c>)
 8000314:	f001 fc7f 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin( LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 0);      // LED YELLOW ON
 8000318:	2200      	movs	r2, #0
 800031a:	2120      	movs	r1, #32
 800031c:	480e      	ldr	r0, [pc, #56]	; (8000358 <ToggleSignal_LEFT_RIGHT_LED+0x8c>)
 800031e:	f001 fc7a 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin( LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, 1);
 8000322:	2201      	movs	r2, #1
 8000324:	2140      	movs	r1, #64	; 0x40
 8000326:	480c      	ldr	r0, [pc, #48]	; (8000358 <ToggleSignal_LEFT_RIGHT_LED+0x8c>)
 8000328:	f001 fc75 	bl	8001c16 <HAL_GPIO_WritePin>
		break;
 800032c:	e010      	b.n	8000350 <ToggleSignal_LEFT_RIGHT_LED+0x84>
	    	HAL_GPIO_WritePin( LED_RED_2_GPIO_Port, LED_RED_2_Pin, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	2110      	movs	r1, #16
 8000332:	4809      	ldr	r0, [pc, #36]	; (8000358 <ToggleSignal_LEFT_RIGHT_LED+0x8c>)
 8000334:	f001 fc6f 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin( LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 1);
 8000338:	2201      	movs	r2, #1
 800033a:	2120      	movs	r1, #32
 800033c:	4806      	ldr	r0, [pc, #24]	; (8000358 <ToggleSignal_LEFT_RIGHT_LED+0x8c>)
 800033e:	f001 fc6a 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin( LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, 0);           // LED GREEN ON
 8000342:	2200      	movs	r2, #0
 8000344:	2140      	movs	r1, #64	; 0x40
 8000346:	4804      	ldr	r0, [pc, #16]	; (8000358 <ToggleSignal_LEFT_RIGHT_LED+0x8c>)
 8000348:	f001 fc65 	bl	8001c16 <HAL_GPIO_WritePin>
		break;
 800034c:	e000      	b.n	8000350 <ToggleSignal_LEFT_RIGHT_LED+0x84>
	    break;
 800034e:	bf00      	nop
	}
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40010800 	.word	0x40010800

0800035c <display7SEG>:
void display7SEG(int num)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b09      	cmp	r3, #9
 8000368:	f200 81fa 	bhi.w	8000760 <display7SEG+0x404>
 800036c:	a201      	add	r2, pc, #4	; (adr r2, 8000374 <display7SEG+0x18>)
 800036e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000372:	bf00      	nop
 8000374:	0800039d 	.word	0x0800039d
 8000378:	080003fd 	.word	0x080003fd
 800037c:	0800045d 	.word	0x0800045d
 8000380:	080004bd 	.word	0x080004bd
 8000384:	0800051d 	.word	0x0800051d
 8000388:	0800057d 	.word	0x0800057d
 800038c:	080005dd 	.word	0x080005dd
 8000390:	0800063d 	.word	0x0800063d
 8000394:	080006a1 	.word	0x080006a1
 8000398:	08000701 	.word	0x08000701
	switch(num)
	{
	    case 0:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);     //a
 800039c:	2200      	movs	r2, #0
 800039e:	2180      	movs	r1, #128	; 0x80
 80003a0:	48be      	ldr	r0, [pc, #760]	; (800069c <display7SEG+0x340>)
 80003a2:	f001 fc38 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);     //b
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ac:	48bb      	ldr	r0, [pc, #748]	; (800069c <display7SEG+0x340>)
 80003ae:	f001 fc32 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);     //c
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b8:	48b8      	ldr	r0, [pc, #736]	; (800069c <display7SEG+0x340>)
 80003ba:	f001 fc2c 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);     //d
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c4:	48b5      	ldr	r0, [pc, #724]	; (800069c <display7SEG+0x340>)
 80003c6:	f001 fc26 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);     //e
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003d0:	48b2      	ldr	r0, [pc, #712]	; (800069c <display7SEG+0x340>)
 80003d2:	f001 fc20 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);     //f
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003dc:	48af      	ldr	r0, [pc, #700]	; (800069c <display7SEG+0x340>)
 80003de:	f001 fc1a 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);     //g
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e8:	48ac      	ldr	r0, [pc, #688]	; (800069c <display7SEG+0x340>)
 80003ea:	f001 fc14 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003f4:	48a9      	ldr	r0, [pc, #676]	; (800069c <display7SEG+0x340>)
 80003f6:	f001 fc0e 	bl	8001c16 <HAL_GPIO_WritePin>
	    break;
 80003fa:	e1e1      	b.n	80007c0 <display7SEG+0x464>
	    case 1:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);      //a
 80003fc:	2201      	movs	r2, #1
 80003fe:	2180      	movs	r1, #128	; 0x80
 8000400:	48a6      	ldr	r0, [pc, #664]	; (800069c <display7SEG+0x340>)
 8000402:	f001 fc08 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);     //b
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800040c:	48a3      	ldr	r0, [pc, #652]	; (800069c <display7SEG+0x340>)
 800040e:	f001 fc02 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);     //c
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000418:	48a0      	ldr	r0, [pc, #640]	; (800069c <display7SEG+0x340>)
 800041a:	f001 fbfc 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);     //d
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000424:	489d      	ldr	r0, [pc, #628]	; (800069c <display7SEG+0x340>)
 8000426:	f001 fbf6 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);     //e
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000430:	489a      	ldr	r0, [pc, #616]	; (800069c <display7SEG+0x340>)
 8000432:	f001 fbf0 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);     //f
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800043c:	4897      	ldr	r0, [pc, #604]	; (800069c <display7SEG+0x340>)
 800043e:	f001 fbea 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);     //g
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000448:	4894      	ldr	r0, [pc, #592]	; (800069c <display7SEG+0x340>)
 800044a:	f001 fbe4 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000454:	4891      	ldr	r0, [pc, #580]	; (800069c <display7SEG+0x340>)
 8000456:	f001 fbde 	bl	8001c16 <HAL_GPIO_WritePin>
	    break;
 800045a:	e1b1      	b.n	80007c0 <display7SEG+0x464>
	    case 2:

	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);          //a
 800045c:	2200      	movs	r2, #0
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	488e      	ldr	r0, [pc, #568]	; (800069c <display7SEG+0x340>)
 8000462:	f001 fbd8 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);      //b
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	488b      	ldr	r0, [pc, #556]	; (800069c <display7SEG+0x340>)
 800046e:	f001 fbd2 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 1);     //c
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000478:	4888      	ldr	r0, [pc, #544]	; (800069c <display7SEG+0x340>)
 800047a:	f001 fbcc 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);     //d
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000484:	4885      	ldr	r0, [pc, #532]	; (800069c <display7SEG+0x340>)
 8000486:	f001 fbc6 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);     //e
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000490:	4882      	ldr	r0, [pc, #520]	; (800069c <display7SEG+0x340>)
 8000492:	f001 fbc0 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);     //f
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800049c:	487f      	ldr	r0, [pc, #508]	; (800069c <display7SEG+0x340>)
 800049e:	f001 fbba 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);    //g
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a8:	487c      	ldr	r0, [pc, #496]	; (800069c <display7SEG+0x340>)
 80004aa:	f001 fbb4 	bl	8001c16 <HAL_GPIO_WritePin>
	 	 	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004b4:	4879      	ldr	r0, [pc, #484]	; (800069c <display7SEG+0x340>)
 80004b6:	f001 fbae 	bl	8001c16 <HAL_GPIO_WritePin>
	    break;
 80004ba:	e181      	b.n	80007c0 <display7SEG+0x464>
	    case 3:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);          //a
 80004bc:	2200      	movs	r2, #0
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	4876      	ldr	r0, [pc, #472]	; (800069c <display7SEG+0x340>)
 80004c2:	f001 fba8 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);      //b
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004cc:	4873      	ldr	r0, [pc, #460]	; (800069c <display7SEG+0x340>)
 80004ce:	f001 fba2 	bl	8001c16 <HAL_GPIO_WritePin>
	     	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);     //c
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d8:	4870      	ldr	r0, [pc, #448]	; (800069c <display7SEG+0x340>)
 80004da:	f001 fb9c 	bl	8001c16 <HAL_GPIO_WritePin>
	     	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);     //d
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e4:	486d      	ldr	r0, [pc, #436]	; (800069c <display7SEG+0x340>)
 80004e6:	f001 fb96 	bl	8001c16 <HAL_GPIO_WritePin>
	     	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);     //e
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f0:	486a      	ldr	r0, [pc, #424]	; (800069c <display7SEG+0x340>)
 80004f2:	f001 fb90 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);     //f
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fc:	4867      	ldr	r0, [pc, #412]	; (800069c <display7SEG+0x340>)
 80004fe:	f001 fb8a 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);    //g
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000508:	4864      	ldr	r0, [pc, #400]	; (800069c <display7SEG+0x340>)
 800050a:	f001 fb84 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000514:	4861      	ldr	r0, [pc, #388]	; (800069c <display7SEG+0x340>)
 8000516:	f001 fb7e 	bl	8001c16 <HAL_GPIO_WritePin>

	    break;
 800051a:	e151      	b.n	80007c0 <display7SEG+0x464>
	    case 4:
	    	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);          //a
 800051c:	2201      	movs	r2, #1
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	485e      	ldr	r0, [pc, #376]	; (800069c <display7SEG+0x340>)
 8000522:	f001 fb78 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);      //b
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052c:	485b      	ldr	r0, [pc, #364]	; (800069c <display7SEG+0x340>)
 800052e:	f001 fb72 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);     //c
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000538:	4858      	ldr	r0, [pc, #352]	; (800069c <display7SEG+0x340>)
 800053a:	f001 fb6c 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);     //d
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000544:	4855      	ldr	r0, [pc, #340]	; (800069c <display7SEG+0x340>)
 8000546:	f001 fb66 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);     //e
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000550:	4852      	ldr	r0, [pc, #328]	; (800069c <display7SEG+0x340>)
 8000552:	f001 fb60 	bl	8001c16 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);     //f
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055c:	484f      	ldr	r0, [pc, #316]	; (800069c <display7SEG+0x340>)
 800055e:	f001 fb5a 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);    //g
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000568:	484c      	ldr	r0, [pc, #304]	; (800069c <display7SEG+0x340>)
 800056a:	f001 fb54 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000574:	4849      	ldr	r0, [pc, #292]	; (800069c <display7SEG+0x340>)
 8000576:	f001 fb4e 	bl	8001c16 <HAL_GPIO_WritePin>
	    break;
 800057a:	e121      	b.n	80007c0 <display7SEG+0x464>
	    case 5:
	    	 HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);          //a
 800057c:	2200      	movs	r2, #0
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	4846      	ldr	r0, [pc, #280]	; (800069c <display7SEG+0x340>)
 8000582:	f001 fb48 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);      //b
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058c:	4843      	ldr	r0, [pc, #268]	; (800069c <display7SEG+0x340>)
 800058e:	f001 fb42 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);     //c
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000598:	4840      	ldr	r0, [pc, #256]	; (800069c <display7SEG+0x340>)
 800059a:	f001 fb3c 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);     //d
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	483d      	ldr	r0, [pc, #244]	; (800069c <display7SEG+0x340>)
 80005a6:	f001 fb36 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);     //e
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b0:	483a      	ldr	r0, [pc, #232]	; (800069c <display7SEG+0x340>)
 80005b2:	f001 fb30 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);     //f
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005bc:	4837      	ldr	r0, [pc, #220]	; (800069c <display7SEG+0x340>)
 80005be:	f001 fb2a 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);    //g
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	4834      	ldr	r0, [pc, #208]	; (800069c <display7SEG+0x340>)
 80005ca:	f001 fb24 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d4:	4831      	ldr	r0, [pc, #196]	; (800069c <display7SEG+0x340>)
 80005d6:	f001 fb1e 	bl	8001c16 <HAL_GPIO_WritePin>
	    break;
 80005da:	e0f1      	b.n	80007c0 <display7SEG+0x464>
	    case 6:
	    	 HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);          //a
 80005dc:	2200      	movs	r2, #0
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	482e      	ldr	r0, [pc, #184]	; (800069c <display7SEG+0x340>)
 80005e2:	f001 fb18 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);      //b
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ec:	482b      	ldr	r0, [pc, #172]	; (800069c <display7SEG+0x340>)
 80005ee:	f001 fb12 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);     //c
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f8:	4828      	ldr	r0, [pc, #160]	; (800069c <display7SEG+0x340>)
 80005fa:	f001 fb0c 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);     //d
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000604:	4825      	ldr	r0, [pc, #148]	; (800069c <display7SEG+0x340>)
 8000606:	f001 fb06 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);     //e
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000610:	4822      	ldr	r0, [pc, #136]	; (800069c <display7SEG+0x340>)
 8000612:	f001 fb00 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);     //f
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061c:	481f      	ldr	r0, [pc, #124]	; (800069c <display7SEG+0x340>)
 800061e:	f001 fafa 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);    //g
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000628:	481c      	ldr	r0, [pc, #112]	; (800069c <display7SEG+0x340>)
 800062a:	f001 faf4 	bl	8001c16 <HAL_GPIO_WritePin>
	    	 HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000634:	4819      	ldr	r0, [pc, #100]	; (800069c <display7SEG+0x340>)
 8000636:	f001 faee 	bl	8001c16 <HAL_GPIO_WritePin>
	    break;
 800063a:	e0c1      	b.n	80007c0 <display7SEG+0x464>
	    case 7:
	          HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);          //a
 800063c:	2200      	movs	r2, #0
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	4816      	ldr	r0, [pc, #88]	; (800069c <display7SEG+0x340>)
 8000642:	f001 fae8 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);      //b
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	4813      	ldr	r0, [pc, #76]	; (800069c <display7SEG+0x340>)
 800064e:	f001 fae2 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);     //c
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000658:	4810      	ldr	r0, [pc, #64]	; (800069c <display7SEG+0x340>)
 800065a:	f001 fadc 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);     //d
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <display7SEG+0x340>)
 8000666:	f001 fad6 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);     //e
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	480a      	ldr	r0, [pc, #40]	; (800069c <display7SEG+0x340>)
 8000672:	f001 fad0 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);     //f
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <display7SEG+0x340>)
 800067e:	f001 faca 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);    //g
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <display7SEG+0x340>)
 800068a:	f001 fac4 	bl	8001c16 <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000694:	4801      	ldr	r0, [pc, #4]	; (800069c <display7SEG+0x340>)
 8000696:	f001 fabe 	bl	8001c16 <HAL_GPIO_WritePin>
	    break;
 800069a:	e091      	b.n	80007c0 <display7SEG+0x464>
 800069c:	40010800 	.word	0x40010800
	    case 8:
	          HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);          //a
 80006a0:	2200      	movs	r2, #0
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	4848      	ldr	r0, [pc, #288]	; (80007c8 <display7SEG+0x46c>)
 80006a6:	f001 fab6 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);      //b
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b0:	4845      	ldr	r0, [pc, #276]	; (80007c8 <display7SEG+0x46c>)
 80006b2:	f001 fab0 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);     //c
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006bc:	4842      	ldr	r0, [pc, #264]	; (80007c8 <display7SEG+0x46c>)
 80006be:	f001 faaa 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);     //d
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c8:	483f      	ldr	r0, [pc, #252]	; (80007c8 <display7SEG+0x46c>)
 80006ca:	f001 faa4 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);     //e
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d4:	483c      	ldr	r0, [pc, #240]	; (80007c8 <display7SEG+0x46c>)
 80006d6:	f001 fa9e 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);     //f
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e0:	4839      	ldr	r0, [pc, #228]	; (80007c8 <display7SEG+0x46c>)
 80006e2:	f001 fa98 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);    //g
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ec:	4836      	ldr	r0, [pc, #216]	; (80007c8 <display7SEG+0x46c>)
 80006ee:	f001 fa92 	bl	8001c16 <HAL_GPIO_WritePin>
	 	      HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f8:	4833      	ldr	r0, [pc, #204]	; (80007c8 <display7SEG+0x46c>)
 80006fa:	f001 fa8c 	bl	8001c16 <HAL_GPIO_WritePin>
	    break;
 80006fe:	e05f      	b.n	80007c0 <display7SEG+0x464>
	    case 9:
	          HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);          //a
 8000700:	2200      	movs	r2, #0
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	4830      	ldr	r0, [pc, #192]	; (80007c8 <display7SEG+0x46c>)
 8000706:	f001 fa86 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);      //b
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000710:	482d      	ldr	r0, [pc, #180]	; (80007c8 <display7SEG+0x46c>)
 8000712:	f001 fa80 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);     //c
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071c:	482a      	ldr	r0, [pc, #168]	; (80007c8 <display7SEG+0x46c>)
 800071e:	f001 fa7a 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);     //d
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000728:	4827      	ldr	r0, [pc, #156]	; (80007c8 <display7SEG+0x46c>)
 800072a:	f001 fa74 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);     //e
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000734:	4824      	ldr	r0, [pc, #144]	; (80007c8 <display7SEG+0x46c>)
 8000736:	f001 fa6e 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);     //f
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000740:	4821      	ldr	r0, [pc, #132]	; (80007c8 <display7SEG+0x46c>)
 8000742:	f001 fa68 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);    //g
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074c:	481e      	ldr	r0, [pc, #120]	; (80007c8 <display7SEG+0x46c>)
 800074e:	f001 fa62 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000758:	481b      	ldr	r0, [pc, #108]	; (80007c8 <display7SEG+0x46c>)
 800075a:	f001 fa5c 	bl	8001c16 <HAL_GPIO_WritePin>
	    break;
 800075e:	e02f      	b.n	80007c0 <display7SEG+0x464>
	    default:
	          HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);          //a
 8000760:	2201      	movs	r2, #1
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	4818      	ldr	r0, [pc, #96]	; (80007c8 <display7SEG+0x46c>)
 8000766:	f001 fa56 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);      //b
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000770:	4815      	ldr	r0, [pc, #84]	; (80007c8 <display7SEG+0x46c>)
 8000772:	f001 fa50 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 1);     //c
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077c:	4812      	ldr	r0, [pc, #72]	; (80007c8 <display7SEG+0x46c>)
 800077e:	f001 fa4a 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);     //d
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000788:	480f      	ldr	r0, [pc, #60]	; (80007c8 <display7SEG+0x46c>)
 800078a:	f001 fa44 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);     //e
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <display7SEG+0x46c>)
 8000796:	f001 fa3e 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);     //f
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <display7SEG+0x46c>)
 80007a2:	f001 fa38 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);    //g
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <display7SEG+0x46c>)
 80007ae:	f001 fa32 	bl	8001c16 <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <display7SEG+0x46c>)
 80007ba:	f001 fa2c 	bl	8001c16 <HAL_GPIO_WritePin>
	    break;
 80007be:	bf00      	nop
	}
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40010800 	.word	0x40010800

080007cc <clearALLLED_Traffic>:
void clearALLLED_Traffic()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	// clear all led 7SEG and LED Red,Green, yellow of Traffic light.
	        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2108      	movs	r1, #8
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <clearALLLED_Traffic+0x6c>)
 80007d6:	f001 fa1e 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2110      	movs	r1, #16
 80007de:	4816      	ldr	r0, [pc, #88]	; (8000838 <clearALLLED_Traffic+0x6c>)
 80007e0:	f001 fa19 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <clearALLLED_Traffic+0x6c>)
 80007ea:	f001 fa14 	bl	8001c16 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	4811      	ldr	r0, [pc, #68]	; (8000838 <clearALLLED_Traffic+0x6c>)
 80007f4:	f001 fa0f 	bl	8001c16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, 1);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2102      	movs	r1, #2
 80007fc:	480f      	ldr	r0, [pc, #60]	; (800083c <clearALLLED_Traffic+0x70>)
 80007fe:	f001 fa0a 	bl	8001c16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, 1);
 8000802:	2201      	movs	r2, #1
 8000804:	2104      	movs	r1, #4
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <clearALLLED_Traffic+0x70>)
 8000808:	f001 fa05 	bl	8001c16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, 1);
 800080c:	2201      	movs	r2, #1
 800080e:	2108      	movs	r1, #8
 8000810:	480a      	ldr	r0, [pc, #40]	; (800083c <clearALLLED_Traffic+0x70>)
 8000812:	f001 fa00 	bl	8001c16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, 1);
 8000816:	2201      	movs	r2, #1
 8000818:	2110      	movs	r1, #16
 800081a:	4808      	ldr	r0, [pc, #32]	; (800083c <clearALLLED_Traffic+0x70>)
 800081c:	f001 f9fb 	bl	8001c16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 1);
 8000820:	2201      	movs	r2, #1
 8000822:	2120      	movs	r1, #32
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <clearALLLED_Traffic+0x70>)
 8000826:	f001 f9f6 	bl	8001c16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <clearALLLED_Traffic+0x70>)
 8000830:	f001 f9f1 	bl	8001c16 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40010c00 	.word	0x40010c00
 800083c:	40010800 	.word	0x40010800

08000840 <clearALLLED7SEG_Control>:
void clearALLLED7SEG_Control()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	// clear ALL LED 7 SEG "MODE" and LED 7 SEG "SET TIMER"
           HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2180      	movs	r1, #128	; 0x80
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <clearALLLED7SEG_Control+0x38>)
 800084a:	f001 f9e4 	bl	8001c16 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <clearALLLED7SEG_Control+0x38>)
 8000856:	f001 f9de 	bl	8001c16 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <clearALLLED7SEG_Control+0x38>)
 8000862:	f001 f9d8 	bl	8001c16 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(EN8_GPIO_Port, EN8_Pin, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <clearALLLED7SEG_Control+0x38>)
 800086e:	f001 f9d2 	bl	8001c16 <HAL_GPIO_WritePin>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40010c00 	.word	0x40010c00

0800087c <display_TRAFFICLIGHT_LEFT_RIGHT>:
void display_TRAFFICLIGHT_LEFT_RIGHT()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	 if(time_RED_LEFT_RIGHT>=0) // 5
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <display_TRAFFICLIGHT_LEFT_RIGHT+0x6c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0c      	blt.n	80008a2 <display_TRAFFICLIGHT_LEFT_RIGHT+0x26>
	 {
		 time7SEG_TRAFFIC_LEFT_RIGHT= time_RED_LEFT_RIGHT;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <display_TRAFFICLIGHT_LEFT_RIGHT+0x6c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a17      	ldr	r2, [pc, #92]	; (80008ec <display_TRAFFICLIGHT_LEFT_RIGHT+0x70>)
 800088e:	6013      	str	r3, [r2, #0]
		 time_RED_LEFT_RIGHT--;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <display_TRAFFICLIGHT_LEFT_RIGHT+0x6c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3b01      	subs	r3, #1
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <display_TRAFFICLIGHT_LEFT_RIGHT+0x6c>)
 8000898:	6013      	str	r3, [r2, #0]
		 ToggleSignal_LEFT_RIGHT_LED(0); // Toogle LED RED on.
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fd16 	bl	80002cc <ToggleSignal_LEFT_RIGHT_LED>
	 {
		 time7SEG_TRAFFIC_LEFT_RIGHT= time_YELLOW_LEFT_RIGHT;
		 time_YELLOW_LEFT_RIGHT--;
		 ToggleSignal_LEFT_RIGHT_LED(1); // Toogle LED YELLOW on.
	 }
}
 80008a0:	e020      	b.n	80008e4 <display_TRAFFICLIGHT_LEFT_RIGHT+0x68>
	 else if (time_GREEN_LEFT_RIGHT>=0)
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <display_TRAFFICLIGHT_LEFT_RIGHT+0x74>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db0c      	blt.n	80008c4 <display_TRAFFICLIGHT_LEFT_RIGHT+0x48>
		 time7SEG_TRAFFIC_LEFT_RIGHT= time_GREEN_LEFT_RIGHT;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <display_TRAFFICLIGHT_LEFT_RIGHT+0x74>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <display_TRAFFICLIGHT_LEFT_RIGHT+0x70>)
 80008b0:	6013      	str	r3, [r2, #0]
		 time_GREEN_LEFT_RIGHT--;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <display_TRAFFICLIGHT_LEFT_RIGHT+0x74>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <display_TRAFFICLIGHT_LEFT_RIGHT+0x74>)
 80008ba:	6013      	str	r3, [r2, #0]
		 ToggleSignal_LEFT_RIGHT_LED(2); // Toogle LED GREEN on.
 80008bc:	2002      	movs	r0, #2
 80008be:	f7ff fd05 	bl	80002cc <ToggleSignal_LEFT_RIGHT_LED>
}
 80008c2:	e00f      	b.n	80008e4 <display_TRAFFICLIGHT_LEFT_RIGHT+0x68>
	 else if(time_YELLOW_LEFT_RIGHT>=0)
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <display_TRAFFICLIGHT_LEFT_RIGHT+0x78>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db0b      	blt.n	80008e4 <display_TRAFFICLIGHT_LEFT_RIGHT+0x68>
		 time7SEG_TRAFFIC_LEFT_RIGHT= time_YELLOW_LEFT_RIGHT;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <display_TRAFFICLIGHT_LEFT_RIGHT+0x78>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <display_TRAFFICLIGHT_LEFT_RIGHT+0x70>)
 80008d2:	6013      	str	r3, [r2, #0]
		 time_YELLOW_LEFT_RIGHT--;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <display_TRAFFICLIGHT_LEFT_RIGHT+0x78>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3b01      	subs	r3, #1
 80008da:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <display_TRAFFICLIGHT_LEFT_RIGHT+0x78>)
 80008dc:	6013      	str	r3, [r2, #0]
		 ToggleSignal_LEFT_RIGHT_LED(1); // Toogle LED YELLOW on.
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff fcf4 	bl	80002cc <ToggleSignal_LEFT_RIGHT_LED>
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000018 	.word	0x20000018
 80008ec:	20000024 	.word	0x20000024
 80008f0:	2000001c 	.word	0x2000001c
 80008f4:	20000020 	.word	0x20000020

080008f8 <display_LED7SEG_CONTROLLER>:
void display_LED7SEG_CONTROLLER(int time_input, int mode)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
       if(timeRUN_LED7SEG_CONTROLLER>9)   // EN5 , EN6
 8000902:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <display_LED7SEG_CONTROLLER+0x10c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b09      	cmp	r3, #9
 8000908:	dd0f      	ble.n	800092a <display_LED7SEG_CONTROLLER+0x32>
       {
    	   HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, 1);  // Toggle Signal EN5 to show value "mode/10"
 800090a:	2201      	movs	r2, #1
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	483e      	ldr	r0, [pc, #248]	; (8000a08 <display_LED7SEG_CONTROLLER+0x110>)
 8000910:	f001 f981 	bl	8001c16 <HAL_GPIO_WritePin>
    	   display7SEG(mode/10);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	4a3d      	ldr	r2, [pc, #244]	; (8000a0c <display_LED7SEG_CONTROLLER+0x114>)
 8000918:	fb82 1203 	smull	r1, r2, r2, r3
 800091c:	1092      	asrs	r2, r2, #2
 800091e:	17db      	asrs	r3, r3, #31
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fd1a 	bl	800035c <display7SEG>
 8000928:	e062      	b.n	80009f0 <display_LED7SEG_CONTROLLER+0xf8>
       }
       else if(timeRUN_LED7SEG_CONTROLLER>6)
 800092a:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <display_LED7SEG_CONTROLLER+0x10c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b06      	cmp	r3, #6
 8000930:	dd1a      	ble.n	8000968 <display_LED7SEG_CONTROLLER+0x70>
       {
    	   HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, 0);  // Toggle Signal EN6 to show value "mode%10"
 8000932:	2200      	movs	r2, #0
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	4834      	ldr	r0, [pc, #208]	; (8000a08 <display_LED7SEG_CONTROLLER+0x110>)
 8000938:	f001 f96d 	bl	8001c16 <HAL_GPIO_WritePin>
    	   HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, 1);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000942:	4831      	ldr	r0, [pc, #196]	; (8000a08 <display_LED7SEG_CONTROLLER+0x110>)
 8000944:	f001 f967 	bl	8001c16 <HAL_GPIO_WritePin>
    	   display7SEG(mode%10);
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	4b30      	ldr	r3, [pc, #192]	; (8000a0c <display_LED7SEG_CONTROLLER+0x114>)
 800094c:	fb83 1302 	smull	r1, r3, r3, r2
 8000950:	1099      	asrs	r1, r3, #2
 8000952:	17d3      	asrs	r3, r2, #31
 8000954:	1ac9      	subs	r1, r1, r3
 8000956:	460b      	mov	r3, r1
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	440b      	add	r3, r1
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	1ad1      	subs	r1, r2, r3
 8000960:	4608      	mov	r0, r1
 8000962:	f7ff fcfb 	bl	800035c <display7SEG>
 8000966:	e043      	b.n	80009f0 <display_LED7SEG_CONTROLLER+0xf8>
       }
       else if(timeRUN_LED7SEG_CONTROLLER>3)
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <display_LED7SEG_CONTROLLER+0x10c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b03      	cmp	r3, #3
 800096e:	dd16      	ble.n	800099e <display_LED7SEG_CONTROLLER+0xa6>
       {
    	   HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, 0);  // Toggle Signal EN7 to show value "mode/10"
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	4824      	ldr	r0, [pc, #144]	; (8000a08 <display_LED7SEG_CONTROLLER+0x110>)
 8000978:	f001 f94d 	bl	8001c16 <HAL_GPIO_WritePin>
    	   HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000982:	4821      	ldr	r0, [pc, #132]	; (8000a08 <display_LED7SEG_CONTROLLER+0x110>)
 8000984:	f001 f947 	bl	8001c16 <HAL_GPIO_WritePin>
    	   display7SEG(time_input/10);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <display_LED7SEG_CONTROLLER+0x114>)
 800098c:	fb82 1203 	smull	r1, r2, r2, r3
 8000990:	1092      	asrs	r2, r2, #2
 8000992:	17db      	asrs	r3, r3, #31
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fce0 	bl	800035c <display7SEG>
 800099c:	e028      	b.n	80009f0 <display_LED7SEG_CONTROLLER+0xf8>
       }
       else if(timeRUN_LED7SEG_CONTROLLER>0)
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <display_LED7SEG_CONTROLLER+0x10c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	dd1b      	ble.n	80009de <display_LED7SEG_CONTROLLER+0xe6>
       {
    	   HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, 0);  // Toggle Signal EN8 to show value "mode%10"
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ac:	4816      	ldr	r0, [pc, #88]	; (8000a08 <display_LED7SEG_CONTROLLER+0x110>)
 80009ae:	f001 f932 	bl	8001c16 <HAL_GPIO_WritePin>
    	   HAL_GPIO_WritePin(EN8_GPIO_Port, EN8_Pin, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b8:	4813      	ldr	r0, [pc, #76]	; (8000a08 <display_LED7SEG_CONTROLLER+0x110>)
 80009ba:	f001 f92c 	bl	8001c16 <HAL_GPIO_WritePin>
    	   display7SEG(time_input%10);
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <display_LED7SEG_CONTROLLER+0x114>)
 80009c2:	fb83 1302 	smull	r1, r3, r3, r2
 80009c6:	1099      	asrs	r1, r3, #2
 80009c8:	17d3      	asrs	r3, r2, #31
 80009ca:	1ac9      	subs	r1, r1, r3
 80009cc:	460b      	mov	r3, r1
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	1ad1      	subs	r1, r2, r3
 80009d6:	4608      	mov	r0, r1
 80009d8:	f7ff fcc0 	bl	800035c <display7SEG>
 80009dc:	e008      	b.n	80009f0 <display_LED7SEG_CONTROLLER+0xf8>
       }
       else
       {
    	   timeRUN_LED7SEG_CONTROLLER=TIME_RUN7SEGMENT_EDIT; // = 16
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <display_LED7SEG_CONTROLLER+0x10c>)
 80009e0:	220c      	movs	r2, #12
 80009e2:	601a      	str	r2, [r3, #0]
    	   HAL_GPIO_WritePin(EN8_GPIO_Port, EN8_Pin, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <display_LED7SEG_CONTROLLER+0x110>)
 80009ec:	f001 f913 	bl	8001c16 <HAL_GPIO_WritePin>
       }
       timeRUN_LED7SEG_CONTROLLER=timeRUN_LED7SEG_CONTROLLER-1;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <display_LED7SEG_CONTROLLER+0x10c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	4a03      	ldr	r2, [pc, #12]	; (8000a04 <display_LED7SEG_CONTROLLER+0x10c>)
 80009f8:	6013      	str	r3, [r2, #0]
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000034 	.word	0x20000034
 8000a08:	40010c00 	.word	0x40010c00
 8000a0c:	66666667 	.word	0x66666667

08000a10 <Blinking_LED>:
void Blinking_LED(int mode)                // ALL single led blinking at 2Hz => 250*2.10^-3
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	switch(mode)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d043      	beq.n	8000aa6 <Blinking_LED+0x96>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	dc5d      	bgt.n	8000ae0 <Blinking_LED+0xd0>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d003      	beq.n	8000a32 <Blinking_LED+0x22>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d01d      	beq.n	8000a6c <Blinking_LED+0x5c>
		  HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, 1);
		  HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 1);
		  HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
	  break;
	  default:
	  break;
 8000a30:	e056      	b.n	8000ae0 <Blinking_LED+0xd0>
		  HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8000a32:	2102      	movs	r1, #2
 8000a34:	482d      	ldr	r0, [pc, #180]	; (8000aec <Blinking_LED+0xdc>)
 8000a36:	f001 f906 	bl	8001c46 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, 1);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	482b      	ldr	r0, [pc, #172]	; (8000aec <Blinking_LED+0xdc>)
 8000a40:	f001 f8e9 	bl	8001c16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, 1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2108      	movs	r1, #8
 8000a48:	4828      	ldr	r0, [pc, #160]	; (8000aec <Blinking_LED+0xdc>)
 8000a4a:	f001 f8e4 	bl	8001c16 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 8000a4e:	2110      	movs	r1, #16
 8000a50:	4826      	ldr	r0, [pc, #152]	; (8000aec <Blinking_LED+0xdc>)
 8000a52:	f001 f8f8 	bl	8001c46 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 1);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2120      	movs	r1, #32
 8000a5a:	4824      	ldr	r0, [pc, #144]	; (8000aec <Blinking_LED+0xdc>)
 8000a5c:	f001 f8db 	bl	8001c16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2140      	movs	r1, #64	; 0x40
 8000a64:	4821      	ldr	r0, [pc, #132]	; (8000aec <Blinking_LED+0xdc>)
 8000a66:	f001 f8d6 	bl	8001c16 <HAL_GPIO_WritePin>
	  break;
 8000a6a:	e03a      	b.n	8000ae2 <Blinking_LED+0xd2>
		  HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2102      	movs	r1, #2
 8000a70:	481e      	ldr	r0, [pc, #120]	; (8000aec <Blinking_LED+0xdc>)
 8000a72:	f001 f8d0 	bl	8001c16 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 8000a76:	2104      	movs	r1, #4
 8000a78:	481c      	ldr	r0, [pc, #112]	; (8000aec <Blinking_LED+0xdc>)
 8000a7a:	f001 f8e4 	bl	8001c46 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, 1);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2108      	movs	r1, #8
 8000a82:	481a      	ldr	r0, [pc, #104]	; (8000aec <Blinking_LED+0xdc>)
 8000a84:	f001 f8c7 	bl	8001c16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4817      	ldr	r0, [pc, #92]	; (8000aec <Blinking_LED+0xdc>)
 8000a8e:	f001 f8c2 	bl	8001c16 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 8000a92:	2120      	movs	r1, #32
 8000a94:	4815      	ldr	r0, [pc, #84]	; (8000aec <Blinking_LED+0xdc>)
 8000a96:	f001 f8d6 	bl	8001c46 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, 1);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	4813      	ldr	r0, [pc, #76]	; (8000aec <Blinking_LED+0xdc>)
 8000aa0:	f001 f8b9 	bl	8001c16 <HAL_GPIO_WritePin>
	  break;
 8000aa4:	e01d      	b.n	8000ae2 <Blinking_LED+0xd2>
		  HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4810      	ldr	r0, [pc, #64]	; (8000aec <Blinking_LED+0xdc>)
 8000aac:	f001 f8b3 	bl	8001c16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, 1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <Blinking_LED+0xdc>)
 8000ab6:	f001 f8ae 	bl	8001c16 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8000aba:	2108      	movs	r1, #8
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <Blinking_LED+0xdc>)
 8000abe:	f001 f8c2 	bl	8001c46 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, 1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2110      	movs	r1, #16
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <Blinking_LED+0xdc>)
 8000ac8:	f001 f8a5 	bl	8001c16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 1);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2120      	movs	r1, #32
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <Blinking_LED+0xdc>)
 8000ad2:	f001 f8a0 	bl	8001c16 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8000ad6:	2140      	movs	r1, #64	; 0x40
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <Blinking_LED+0xdc>)
 8000ada:	f001 f8b4 	bl	8001c46 <HAL_GPIO_TogglePin>
	  break;
 8000ade:	e000      	b.n	8000ae2 <Blinking_LED+0xd2>
	  break;
 8000ae0:	bf00      	nop
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010800 	.word	0x40010800

08000af0 <display_TRAFFICLIGHT_TOP_BOTTOM>:
void display_TRAFFICLIGHT_TOP_BOTTOM()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	// 0.5s will change state
	if(time_period_run<=0)
 8000af4:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <display_TRAFFICLIGHT_TOP_BOTTOM+0xc4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	dc53      	bgt.n	8000ba4 <display_TRAFFICLIGHT_TOP_BOTTOM+0xb4>
	{
		if(time_GREEN_TOP_BOTTOM>=0)   // 3 2 1 0
 8000afc:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <display_TRAFFICLIGHT_TOP_BOTTOM+0xc8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0e      	blt.n	8000b22 <display_TRAFFICLIGHT_TOP_BOTTOM+0x32>
		{
			display_TRAFFICLIGHT_LEFT_RIGHT();
 8000b04:	f7ff feba 	bl	800087c <display_TRAFFICLIGHT_LEFT_RIGHT>
			time7SEG_TRAFFIC_TOP_BOTTOM=time_GREEN_TOP_BOTTOM; //!!!!!!
 8000b08:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <display_TRAFFICLIGHT_TOP_BOTTOM+0xc8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a2b      	ldr	r2, [pc, #172]	; (8000bbc <display_TRAFFICLIGHT_TOP_BOTTOM+0xcc>)
 8000b0e:	6013      	str	r3, [r2, #0]
			time_GREEN_TOP_BOTTOM--;
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <display_TRAFFICLIGHT_TOP_BOTTOM+0xc8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	4a28      	ldr	r2, [pc, #160]	; (8000bb8 <display_TRAFFICLIGHT_TOP_BOTTOM+0xc8>)
 8000b18:	6013      	str	r3, [r2, #0]
			ToggleSignal_TOP_BOTTOM_LED(2);
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff fb8e 	bl	800023c <ToggleSignal_TOP_BOTTOM_LED>
 8000b20:	e03d      	b.n	8000b9e <display_TRAFFICLIGHT_TOP_BOTTOM+0xae>
			//time7SEG_TRAFFIC_TOP_BOTTOM=time_GREEN_TOP_BOTTOM; //!!!!!!
		}
		else if(time_YELLOW_TOP_BOTTOM>=0)  // 2 1 0
 8000b22:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db0e      	blt.n	8000b48 <display_TRAFFICLIGHT_TOP_BOTTOM+0x58>
		{
			display_TRAFFICLIGHT_LEFT_RIGHT();
 8000b2a:	f7ff fea7 	bl	800087c <display_TRAFFICLIGHT_LEFT_RIGHT>
			time7SEG_TRAFFIC_TOP_BOTTOM=time_YELLOW_TOP_BOTTOM; //!!!!!!
 8000b2e:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a22      	ldr	r2, [pc, #136]	; (8000bbc <display_TRAFFICLIGHT_TOP_BOTTOM+0xcc>)
 8000b34:	6013      	str	r3, [r2, #0]
			time_YELLOW_TOP_BOTTOM--;
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd0>)
 8000b3e:	6013      	str	r3, [r2, #0]
			ToggleSignal_TOP_BOTTOM_LED(1);
 8000b40:	2001      	movs	r0, #1
 8000b42:	f7ff fb7b 	bl	800023c <ToggleSignal_TOP_BOTTOM_LED>
 8000b46:	e02a      	b.n	8000b9e <display_TRAFFICLIGHT_TOP_BOTTOM+0xae>
		}
		else if(time_RED_TOP_BOTTOM>=0) // 5 4 3 2 1 0
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0e      	blt.n	8000b6e <display_TRAFFICLIGHT_TOP_BOTTOM+0x7e>
		{
			display_TRAFFICLIGHT_LEFT_RIGHT();
 8000b50:	f7ff fe94 	bl	800087c <display_TRAFFICLIGHT_LEFT_RIGHT>
			time7SEG_TRAFFIC_TOP_BOTTOM=time_RED_TOP_BOTTOM; //!!!!!!
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <display_TRAFFICLIGHT_TOP_BOTTOM+0xcc>)
 8000b5a:	6013      	str	r3, [r2, #0]
			time_RED_TOP_BOTTOM--;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd4>)
 8000b64:	6013      	str	r3, [r2, #0]
			ToggleSignal_TOP_BOTTOM_LED(0);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff fb68 	bl	800023c <ToggleSignal_TOP_BOTTOM_LED>
 8000b6c:	e017      	b.n	8000b9e <display_TRAFFICLIGHT_TOP_BOTTOM+0xae>
		}
		else
		{
			time_GREEN_TOP_BOTTOM=time_GREEN;   //3
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <display_TRAFFICLIGHT_TOP_BOTTOM+0xc8>)
 8000b74:	6013      	str	r3, [r2, #0]
			time_RED_TOP_BOTTOM=time_RED;       //5
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <display_TRAFFICLIGHT_TOP_BOTTOM+0xdc>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd4>)
 8000b7c:	6013      	str	r3, [r2, #0]
			time_YELLOW_TOP_BOTTOM=time_YELLOW;  //2
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <display_TRAFFICLIGHT_TOP_BOTTOM+0xe0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd0>)
 8000b84:	6013      	str	r3, [r2, #0]

			time_GREEN_LEFT_RIGHT= time_GREEN;    //3
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <display_TRAFFICLIGHT_TOP_BOTTOM+0xd8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <display_TRAFFICLIGHT_TOP_BOTTOM+0xe4>)
 8000b8c:	6013      	str	r3, [r2, #0]
			time_RED_LEFT_RIGHT= time_RED;        //5
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <display_TRAFFICLIGHT_TOP_BOTTOM+0xdc>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <display_TRAFFICLIGHT_TOP_BOTTOM+0xe8>)
 8000b94:	6013      	str	r3, [r2, #0]
			time_YELLOW_LEFT_RIGHT= time_YELLOW;  //2
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <display_TRAFFICLIGHT_TOP_BOTTOM+0xe0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <display_TRAFFICLIGHT_TOP_BOTTOM+0xec>)
 8000b9c:	6013      	str	r3, [r2, #0]
		}
		time_period_run=TIME_PER_SECOND;
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <display_TRAFFICLIGHT_TOP_BOTTOM+0xc4>)
 8000ba0:	22fa      	movs	r2, #250	; 0xfa
 8000ba2:	601a      	str	r2, [r3, #0]
	}
	time_period_run=time_period_run-1;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <display_TRAFFICLIGHT_TOP_BOTTOM+0xc4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	4a02      	ldr	r2, [pc, #8]	; (8000bb4 <display_TRAFFICLIGHT_TOP_BOTTOM+0xc4>)
 8000bac:	6013      	str	r3, [r2, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000002c 	.word	0x2000002c
 8000bb8:	20000014 	.word	0x20000014
 8000bbc:	20000028 	.word	0x20000028
 8000bc0:	20000010 	.word	0x20000010
 8000bc4:	2000000c 	.word	0x2000000c
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	2000001c 	.word	0x2000001c
 8000bd8:	20000018 	.word	0x20000018
 8000bdc:	20000020 	.word	0x20000020

08000be0 <display_4LINE_TRAFFICLIGHT>:
void display_4LINE_TRAFFICLIGHT()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	display_TRAFFICLIGHT_TOP_BOTTOM();
 8000be4:	f7ff ff84 	bl	8000af0 <display_TRAFFICLIGHT_TOP_BOTTOM>
	if(timeRUN_LED7SEG_TRAFFICLIGHT>15)        // display MODE 1
 8000be8:	4b50      	ldr	r3, [pc, #320]	; (8000d2c <display_4LINE_TRAFFICLIGHT+0x14c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	dd08      	ble.n	8000c02 <display_4LINE_TRAFFICLIGHT+0x22>
	{
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, 1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	484e      	ldr	r0, [pc, #312]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000bf6:	f001 f80e 	bl	8001c16 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, 0);
		display7SEG(0);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff fbae 	bl	800035c <display7SEG>
 8000c00:	e08d      	b.n	8000d1e <display_4LINE_TRAFFICLIGHT+0x13e>
	}
	else if(timeRUN_LED7SEG_TRAFFICLIGHT>12)  // display MODE 1
 8000c02:	4b4a      	ldr	r3, [pc, #296]	; (8000d2c <display_4LINE_TRAFFICLIGHT+0x14c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b0c      	cmp	r3, #12
 8000c08:	dd0e      	ble.n	8000c28 <display_4LINE_TRAFFICLIGHT+0x48>
	{
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	4848      	ldr	r0, [pc, #288]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000c10:	f001 f801 	bl	8001c16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, 1);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1a:	4845      	ldr	r0, [pc, #276]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000c1c:	f000 fffb 	bl	8001c16 <HAL_GPIO_WritePin>
		display7SEG(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fb9b 	bl	800035c <display7SEG>
 8000c26:	e07a      	b.n	8000d1e <display_4LINE_TRAFFICLIGHT+0x13e>
	}
	else if(timeRUN_LED7SEG_TRAFFICLIGHT>9)
 8000c28:	4b40      	ldr	r3, [pc, #256]	; (8000d2c <display_4LINE_TRAFFICLIGHT+0x14c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b09      	cmp	r3, #9
 8000c2e:	dd16      	ble.n	8000c5e <display_4LINE_TRAFFICLIGHT+0x7e>
	{
		HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c36:	483e      	ldr	r0, [pc, #248]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000c38:	f000 ffed 	bl	8001c16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2108      	movs	r1, #8
 8000c40:	483b      	ldr	r0, [pc, #236]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000c42:	f000 ffe8 	bl	8001c16 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
		display7SEG(time7SEG_TRAFFIC_TOP_BOTTOM/10);
 8000c46:	4b3b      	ldr	r3, [pc, #236]	; (8000d34 <display_4LINE_TRAFFICLIGHT+0x154>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a3b      	ldr	r2, [pc, #236]	; (8000d38 <display_4LINE_TRAFFICLIGHT+0x158>)
 8000c4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c50:	1092      	asrs	r2, r2, #2
 8000c52:	17db      	asrs	r3, r3, #31
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fb80 	bl	800035c <display7SEG>
 8000c5c:	e05f      	b.n	8000d1e <display_4LINE_TRAFFICLIGHT+0x13e>
	}
	else if(timeRUN_LED7SEG_TRAFFICLIGHT>6)
 8000c5e:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <display_4LINE_TRAFFICLIGHT+0x14c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	dd1a      	ble.n	8000c9c <display_4LINE_TRAFFICLIGHT+0xbc>
	{
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2108      	movs	r1, #8
 8000c6a:	4831      	ldr	r0, [pc, #196]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000c6c:	f000 ffd3 	bl	8001c16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2110      	movs	r1, #16
 8000c74:	482e      	ldr	r0, [pc, #184]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000c76:	f000 ffce 	bl	8001c16 <HAL_GPIO_WritePin>
		display7SEG(time7SEG_TRAFFIC_TOP_BOTTOM%10);
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <display_4LINE_TRAFFICLIGHT+0x154>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <display_4LINE_TRAFFICLIGHT+0x158>)
 8000c80:	fb83 1302 	smull	r1, r3, r3, r2
 8000c84:	1099      	asrs	r1, r3, #2
 8000c86:	17d3      	asrs	r3, r2, #31
 8000c88:	1ac9      	subs	r1, r1, r3
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	440b      	add	r3, r1
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	1ad1      	subs	r1, r2, r3
 8000c94:	4608      	mov	r0, r1
 8000c96:	f7ff fb61 	bl	800035c <display7SEG>
 8000c9a:	e040      	b.n	8000d1e <display_4LINE_TRAFFICLIGHT+0x13e>
	}
	else if(timeRUN_LED7SEG_TRAFFICLIGHT>3)
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <display_4LINE_TRAFFICLIGHT+0x14c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	dd15      	ble.n	8000cd0 <display_4LINE_TRAFFICLIGHT+0xf0>
	{
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4821      	ldr	r0, [pc, #132]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000caa:	f000 ffb4 	bl	8001c16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	481f      	ldr	r0, [pc, #124]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000cb4:	f000 ffaf 	bl	8001c16 <HAL_GPIO_WritePin>
	//	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 0);
		display7SEG(time7SEG_TRAFFIC_LEFT_RIGHT/10);
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <display_4LINE_TRAFFICLIGHT+0x15c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <display_4LINE_TRAFFICLIGHT+0x158>)
 8000cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc2:	1092      	asrs	r2, r2, #2
 8000cc4:	17db      	asrs	r3, r3, #31
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fb47 	bl	800035c <display7SEG>
 8000cce:	e026      	b.n	8000d1e <display_4LINE_TRAFFICLIGHT+0x13e>
	}
	else if(timeRUN_LED7SEG_TRAFFICLIGHT>0)
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <display_4LINE_TRAFFICLIGHT+0x14c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	dd1a      	ble.n	8000d0e <display_4LINE_TRAFFICLIGHT+0x12e>
	{
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4814      	ldr	r0, [pc, #80]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000cde:	f000 ff9a 	bl	8001c16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	4812      	ldr	r0, [pc, #72]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000ce8:	f000 ff95 	bl	8001c16 <HAL_GPIO_WritePin>
		display7SEG(time7SEG_TRAFFIC_LEFT_RIGHT%10);
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <display_4LINE_TRAFFICLIGHT+0x15c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <display_4LINE_TRAFFICLIGHT+0x158>)
 8000cf2:	fb83 1302 	smull	r1, r3, r3, r2
 8000cf6:	1099      	asrs	r1, r3, #2
 8000cf8:	17d3      	asrs	r3, r2, #31
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	440b      	add	r3, r1
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	1ad1      	subs	r1, r2, r3
 8000d06:	4608      	mov	r0, r1
 8000d08:	f7ff fb28 	bl	800035c <display7SEG>
 8000d0c:	e007      	b.n	8000d1e <display_4LINE_TRAFFICLIGHT+0x13e>
	}
	else
	{
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2140      	movs	r1, #64	; 0x40
 8000d12:	4807      	ldr	r0, [pc, #28]	; (8000d30 <display_4LINE_TRAFFICLIGHT+0x150>)
 8000d14:	f000 ff7f 	bl	8001c16 <HAL_GPIO_WritePin>
		timeRUN_LED7SEG_TRAFFICLIGHT=TIME_RUN7SEGMENT;
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <display_4LINE_TRAFFICLIGHT+0x14c>)
 8000d1a:	2212      	movs	r2, #18
 8000d1c:	601a      	str	r2, [r3, #0]
	}
	    timeRUN_LED7SEG_TRAFFICLIGHT--;
 8000d1e:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <display_4LINE_TRAFFICLIGHT+0x14c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	4a01      	ldr	r2, [pc, #4]	; (8000d2c <display_4LINE_TRAFFICLIGHT+0x14c>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000030 	.word	0x20000030
 8000d30:	40010c00 	.word	0x40010c00
 8000d34:	20000028 	.word	0x20000028
 8000d38:	66666667 	.word	0x66666667
 8000d3c:	20000024 	.word	0x20000024

08000d40 <fsm_processing>:

int timeAutoIncreases = TIME_AUTO_INCREASES;
int timeBlinking= TIME_BLINKING;

void fsm_processing()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
 switch (button_mode)
 8000d44:	4b4f      	ldr	r3, [pc, #316]	; (8000e84 <fsm_processing+0x144>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	f200 8098 	bhi.w	8000e7e <fsm_processing+0x13e>
 8000d4e:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <fsm_processing+0x14>)
 8000d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d54:	08000d65 	.word	0x08000d65
 8000d58:	08000d9f 	.word	0x08000d9f
 8000d5c:	08000de7 	.word	0x08000de7
 8000d60:	08000e2f 	.word	0x08000e2f
 {
      case MODE_1:
  		if(isButton1Pressed())
 8000d64:	f000 f90c 	bl	8000f80 <isButton1Pressed>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d014      	beq.n	8000d98 <fsm_processing+0x58>
  		{
  			time_RED_edit   = get_Time_RED();             // time_RED_edit = time_RED;
 8000d6e:	f7ff fa47 	bl	8000200 <get_Time_RED>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a44      	ldr	r2, [pc, #272]	; (8000e88 <fsm_processing+0x148>)
 8000d76:	6013      	str	r3, [r2, #0]
  			time_GREEN_edit = get_Time_GREEN();           // time_GREEN_edit = time_GREEN;
 8000d78:	f7ff fa56 	bl	8000228 <get_Time_GREEN>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4a43      	ldr	r2, [pc, #268]	; (8000e8c <fsm_processing+0x14c>)
 8000d80:	6013      	str	r3, [r2, #0]
  			time_YELLOW_edit = get_Time_YELLOW();         // time_YELLOW_edit = time_YELLOW;
 8000d82:	f7ff fa47 	bl	8000214 <get_Time_YELLOW>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a41      	ldr	r2, [pc, #260]	; (8000e90 <fsm_processing+0x150>)
 8000d8a:	6013      	str	r3, [r2, #0]
  			clearALLLED_Traffic();                        // clear ALL LED of 4 Line traffic and 4 LED 7SEGMENT show times of traffic light.
 8000d8c:	f7ff fd1e 	bl	80007cc <clearALLLED_Traffic>
  			button_mode = MODE_2;
 8000d90:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <fsm_processing+0x144>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
  		}
  		else
  		{
  			display_4LINE_TRAFFICLIGHT();
  		}
	  break;
 8000d96:	e073      	b.n	8000e80 <fsm_processing+0x140>
  			display_4LINE_TRAFFICLIGHT();
 8000d98:	f7ff ff22 	bl	8000be0 <display_4LINE_TRAFFICLIGHT>
	  break;
 8000d9c:	e070      	b.n	8000e80 <fsm_processing+0x140>
      case MODE_2:
    	 if(isButton1Pressed())
 8000d9e:	f000 f8ef 	bl	8000f80 <isButton1Pressed>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <fsm_processing+0x70>
    	{
                button_mode=MODE_3;
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <fsm_processing+0x144>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	701a      	strb	r2, [r3, #0]
                break;
 8000dae:	e067      	b.n	8000e80 <fsm_processing+0x140>
    	}
  		else if(isButton2Pressed())
 8000db0:	f000 f8f8 	bl	8000fa4 <isButton2Pressed>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <fsm_processing+0x80>
  		{
  			inscreases_time();
 8000dba:	f000 f86b 	bl	8000e94 <inscreases_time>
 8000dbe:	e009      	b.n	8000dd4 <fsm_processing+0x94>
  		}
  		else if(isButton3Pressed())
 8000dc0:	f000 f902 	bl	8000fc8 <isButton3Pressed>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d004      	beq.n	8000dd4 <fsm_processing+0x94>
  		{
  			set_Time_RED(time_RED_edit);      // timeRED= time_RED_edit
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <fsm_processing+0x148>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff f9bc 	bl	800014c <set_Time_RED>
  			// break ?????
  		}
  		display_LED7SEG_CONTROLLER(time_RED_edit, 2);
 8000dd4:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <fsm_processing+0x148>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fd8c 	bl	80008f8 <display_LED7SEG_CONTROLLER>
  		blinking_led_2Hz();
 8000de0:	f000 f8a0 	bl	8000f24 <blinking_led_2Hz>
	  break;
 8000de4:	e04c      	b.n	8000e80 <fsm_processing+0x140>
      case MODE_3:
     	 if(isButton1Pressed())
 8000de6:	f000 f8cb 	bl	8000f80 <isButton1Pressed>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <fsm_processing+0xb8>
     	{
                 button_mode=MODE_4;
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <fsm_processing+0x144>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	701a      	strb	r2, [r3, #0]
                 break;
 8000df6:	e043      	b.n	8000e80 <fsm_processing+0x140>
     	}
   		else if(isButton2Pressed())
 8000df8:	f000 f8d4 	bl	8000fa4 <isButton2Pressed>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <fsm_processing+0xc8>
   		{
   			inscreases_time();
 8000e02:	f000 f847 	bl	8000e94 <inscreases_time>
 8000e06:	e009      	b.n	8000e1c <fsm_processing+0xdc>
   		}
   		else if(isButton3Pressed())
 8000e08:	f000 f8de 	bl	8000fc8 <isButton3Pressed>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d004      	beq.n	8000e1c <fsm_processing+0xdc>
   		{
   			 set_Time_YELLOW(time_YELLOW_edit);    // timeYELLOW= time_YELLOW_edit
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <fsm_processing+0x150>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff f9a6 	bl	8000168 <set_Time_YELLOW>
   			// break ?????
   		}
   		display_LED7SEG_CONTROLLER(time_YELLOW_edit, 3);
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <fsm_processing+0x150>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2103      	movs	r1, #3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fd68 	bl	80008f8 <display_LED7SEG_CONTROLLER>
   		blinking_led_2Hz();
 8000e28:	f000 f87c 	bl	8000f24 <blinking_led_2Hz>
	  break;
 8000e2c:	e028      	b.n	8000e80 <fsm_processing+0x140>
      case MODE_4:
     	 if(isButton1Pressed())
 8000e2e:	f000 f8a7 	bl	8000f80 <isButton1Pressed>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d007      	beq.n	8000e48 <fsm_processing+0x108>
      	{
     		 setTime_ALL_LED_TRAFFIC();
 8000e38:	f7ff f9b2 	bl	80001a0 <setTime_ALL_LED_TRAFFIC>
     		 clearALLLED7SEG_Control();
 8000e3c:	f7ff fd00 	bl	8000840 <clearALLLED7SEG_Control>
             button_mode=MODE_1;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <fsm_processing+0x144>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
             break;
 8000e46:	e01b      	b.n	8000e80 <fsm_processing+0x140>
      	}
    	else if(isButton2Pressed())
 8000e48:	f000 f8ac 	bl	8000fa4 <isButton2Pressed>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <fsm_processing+0x118>
    	{
    		 inscreases_time();
 8000e52:	f000 f81f 	bl	8000e94 <inscreases_time>
 8000e56:	e009      	b.n	8000e6c <fsm_processing+0x12c>
    	}
    	else if(isButton3Pressed())
 8000e58:	f000 f8b6 	bl	8000fc8 <isButton3Pressed>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d004      	beq.n	8000e6c <fsm_processing+0x12c>
    	{
    		set_Time_GREEN(time_GREEN_edit);  // timeYELLOW= time_YELLOW_edit
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <fsm_processing+0x14c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff f98c 	bl	8000184 <set_Time_GREEN>
    		// break ?????
    	}
    		display_LED7SEG_CONTROLLER(time_GREEN_edit, 4);
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <fsm_processing+0x14c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2104      	movs	r1, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fd40 	bl	80008f8 <display_LED7SEG_CONTROLLER>
    		blinking_led_2Hz();
 8000e78:	f000 f854 	bl	8000f24 <blinking_led_2Hz>
	  break;
 8000e7c:	e000      	b.n	8000e80 <fsm_processing+0x140>
	  default:
	  break;
 8000e7e:	bf00      	nop
 }
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000094 	.word	0x20000094
 8000e88:	20000098 	.word	0x20000098
 8000e8c:	2000009c 	.word	0x2000009c
 8000e90:	200000a0 	.word	0x200000a0

08000e94 <inscreases_time>:
void inscreases_time()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
switch(button_mode)
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <inscreases_time+0x80>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d020      	beq.n	8000ee2 <inscreases_time+0x4e>
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	dc2b      	bgt.n	8000efc <inscreases_time+0x68>
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d002      	beq.n	8000eae <inscreases_time+0x1a>
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d00d      	beq.n	8000ec8 <inscreases_time+0x34>
		{
			time_GREEN_edit = 0;
		}
		break;
  default:
  break;
 8000eac:	e026      	b.n	8000efc <inscreases_time+0x68>
	time_RED_edit++;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <inscreases_time+0x84>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <inscreases_time+0x84>)
 8000eb6:	6013      	str	r3, [r2, #0]
	if(time_RED_edit >= 99)              // start at 0;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <inscreases_time+0x84>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b62      	cmp	r3, #98	; 0x62
 8000ebe:	dd1f      	ble.n	8000f00 <inscreases_time+0x6c>
		time_RED_edit = 0;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <inscreases_time+0x84>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
  break;
 8000ec6:	e01b      	b.n	8000f00 <inscreases_time+0x6c>
	time_YELLOW_edit++;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <inscreases_time+0x88>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <inscreases_time+0x88>)
 8000ed0:	6013      	str	r3, [r2, #0]
	if(time_YELLOW_edit >= 99)
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <inscreases_time+0x88>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b62      	cmp	r3, #98	; 0x62
 8000ed8:	dd14      	ble.n	8000f04 <inscreases_time+0x70>
		time_YELLOW_edit = 0;
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <inscreases_time+0x88>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
  break;
 8000ee0:	e010      	b.n	8000f04 <inscreases_time+0x70>
		time_GREEN_edit++;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <inscreases_time+0x8c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <inscreases_time+0x8c>)
 8000eea:	6013      	str	r3, [r2, #0]
		if(time_GREEN_edit >= 99)
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <inscreases_time+0x8c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b62      	cmp	r3, #98	; 0x62
 8000ef2:	dd09      	ble.n	8000f08 <inscreases_time+0x74>
			time_GREEN_edit = 0;
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <inscreases_time+0x8c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
		break;
 8000efa:	e005      	b.n	8000f08 <inscreases_time+0x74>
  break;
 8000efc:	bf00      	nop
 8000efe:	e004      	b.n	8000f0a <inscreases_time+0x76>
  break;
 8000f00:	bf00      	nop
 8000f02:	e002      	b.n	8000f0a <inscreases_time+0x76>
  break;
 8000f04:	bf00      	nop
 8000f06:	e000      	b.n	8000f0a <inscreases_time+0x76>
		break;
 8000f08:	bf00      	nop
}
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000094 	.word	0x20000094
 8000f18:	20000098 	.word	0x20000098
 8000f1c:	200000a0 	.word	0x200000a0
 8000f20:	2000009c 	.word	0x2000009c

08000f24 <blinking_led_2Hz>:
        	timeAutoIncreases=TIME_AUTO_INCREASES;
        }
        timeAutoIncreases--;
}
void blinking_led_2Hz()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	// 2Hz => 250*2.10(^-3)
   if(timeBlinking<=0)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <blinking_led_2Hz+0x54>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	dc19      	bgt.n	8000f64 <blinking_led_2Hz+0x40>
   {
	   timeBlinking=TIME_BLINKING;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <blinking_led_2Hz+0x54>)
 8000f32:	22fa      	movs	r2, #250	; 0xfa
 8000f34:	601a      	str	r2, [r3, #0]
	   switch(button_mode)
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <blinking_led_2Hz+0x58>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d00e      	beq.n	8000f5c <blinking_led_2Hz+0x38>
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	dc12      	bgt.n	8000f68 <blinking_led_2Hz+0x44>
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d002      	beq.n	8000f4c <blinking_led_2Hz+0x28>
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d004      	beq.n	8000f54 <blinking_led_2Hz+0x30>
	       case MODE_4:
	    	//   mode = 4;
	    	   Blinking_LED(4);
	       break;
	       default:
	       break;
 8000f4a:	e00d      	b.n	8000f68 <blinking_led_2Hz+0x44>
	    	   Blinking_LED(2);
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f7ff fd5f 	bl	8000a10 <Blinking_LED>
	       break;
 8000f52:	e00a      	b.n	8000f6a <blinking_led_2Hz+0x46>
	    	   Blinking_LED(3);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f7ff fd5b 	bl	8000a10 <Blinking_LED>
	       break;
 8000f5a:	e006      	b.n	8000f6a <blinking_led_2Hz+0x46>
	    	   Blinking_LED(4);
 8000f5c:	2004      	movs	r0, #4
 8000f5e:	f7ff fd57 	bl	8000a10 <Blinking_LED>
	       break;
 8000f62:	e002      	b.n	8000f6a <blinking_led_2Hz+0x46>
	   }
   }
 8000f64:	bf00      	nop
 8000f66:	e000      	b.n	8000f6a <blinking_led_2Hz+0x46>
	       break;
 8000f68:	bf00      	nop
   timeBlinking=timeBlinking-1;
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <blinking_led_2Hz+0x54>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	4a01      	ldr	r2, [pc, #4]	; (8000f78 <blinking_led_2Hz+0x54>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000038 	.word	0x20000038
 8000f7c:	20000094 	.word	0x20000094

08000f80 <isButton1Pressed>:
int flag_change_state_button2= 0;
int flag_change_state_button3= 0;


int isButton1Pressed()
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	 if(button1_flag==1)
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <isButton1Pressed+0x20>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d104      	bne.n	8000f96 <isButton1Pressed+0x16>
	 {
		 button1_flag=0;
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <isButton1Pressed+0x20>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
		 return 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <isButton1Pressed+0x18>
	 }
	 return 0;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	200000a4 	.word	0x200000a4

08000fa4 <isButton2Pressed>:
int isButton2Pressed()
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	 if(button2_flag==1)
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <isButton2Pressed+0x20>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d104      	bne.n	8000fba <isButton2Pressed+0x16>
	 {
		 button2_flag=0;
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <isButton2Pressed+0x20>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
		 return 1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <isButton2Pressed+0x18>
	 }
	 return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	200000a8 	.word	0x200000a8

08000fc8 <isButton3Pressed>:
int isButton3Pressed()
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
	 if(button3_flag==1)
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <isButton3Pressed+0x20>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d104      	bne.n	8000fde <isButton3Pressed+0x16>
	 {
		 button3_flag=0;
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <isButton3Pressed+0x20>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
		 return 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <isButton3Pressed+0x18>
	 }
	 return 0;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	200000ac 	.word	0x200000ac

08000fec <subKeyProcess1>:
void subKeyProcess1()
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
	button1_flag=1;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <subKeyProcess1+0x14>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200000a4 	.word	0x200000a4

08001004 <subKeyProcess2>:
void subKeyProcess2()
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	button2_flag=1;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <subKeyProcess2+0x14>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200000a8 	.word	0x200000a8

0800101c <subKeyProcess3>:
void subKeyProcess3()
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	button3_flag=1;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <subKeyProcess3+0x14>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200000ac 	.word	0x200000ac

08001034 <getKeyInput>:
void getKeyInput()
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
   KeyReg0=KeyReg1;
 8001038:	4b83      	ldr	r3, [pc, #524]	; (8001248 <getKeyInput+0x214>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a83      	ldr	r2, [pc, #524]	; (800124c <getKeyInput+0x218>)
 800103e:	6013      	str	r3, [r2, #0]
   KeyReg1=KeyReg2;
 8001040:	4b83      	ldr	r3, [pc, #524]	; (8001250 <getKeyInput+0x21c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a80      	ldr	r2, [pc, #512]	; (8001248 <getKeyInput+0x214>)
 8001046:	6013      	str	r3, [r2, #0]
   KeyReg2=HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001048:	2101      	movs	r1, #1
 800104a:	4882      	ldr	r0, [pc, #520]	; (8001254 <getKeyInput+0x220>)
 800104c:	f000 fdcc 	bl	8001be8 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b7e      	ldr	r3, [pc, #504]	; (8001250 <getKeyInput+0x21c>)
 8001056:	601a      	str	r2, [r3, #0]
   if((KeyReg0==KeyReg1) && (KeyReg1==KeyReg2))
 8001058:	4b7c      	ldr	r3, [pc, #496]	; (800124c <getKeyInput+0x218>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b7a      	ldr	r3, [pc, #488]	; (8001248 <getKeyInput+0x214>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d140      	bne.n	80010e6 <getKeyInput+0xb2>
 8001064:	4b78      	ldr	r3, [pc, #480]	; (8001248 <getKeyInput+0x214>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b79      	ldr	r3, [pc, #484]	; (8001250 <getKeyInput+0x21c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d13a      	bne.n	80010e6 <getKeyInput+0xb2>
   {
         if(KeyReg3 != KeyReg2)  // Nhan tha
 8001070:	4b79      	ldr	r3, [pc, #484]	; (8001258 <getKeyInput+0x224>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b76      	ldr	r3, [pc, #472]	; (8001250 <getKeyInput+0x21c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d022      	beq.n	80010c2 <getKeyInput+0x8e>
         {
        	 KeyReg3 = KeyReg2;
 800107c:	4b74      	ldr	r3, [pc, #464]	; (8001250 <getKeyInput+0x21c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a75      	ldr	r2, [pc, #468]	; (8001258 <getKeyInput+0x224>)
 8001082:	6013      	str	r3, [r2, #0]
        	 if(KeyReg2==PRESSED_STATE)
 8001084:	4b72      	ldr	r3, [pc, #456]	; (8001250 <getKeyInput+0x21c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d113      	bne.n	80010b4 <getKeyInput+0x80>
        	 {
        		    //TODO
          		 if(flag_change_state_button1==0)
 800108c:	4b73      	ldr	r3, [pc, #460]	; (800125c <getKeyInput+0x228>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d105      	bne.n	80010a0 <getKeyInput+0x6c>
          		 {
              		 subKeyProcess1();
 8001094:	f7ff ffaa 	bl	8000fec <subKeyProcess1>
              		 TimerForKeyPress_1=250;
 8001098:	4b71      	ldr	r3, [pc, #452]	; (8001260 <getKeyInput+0x22c>)
 800109a:	22fa      	movs	r2, #250	; 0xfa
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e022      	b.n	80010e6 <getKeyInput+0xb2>
          		 }
          		 else if(flag_change_state_button1==1)
 80010a0:	4b6e      	ldr	r3, [pc, #440]	; (800125c <getKeyInput+0x228>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d11e      	bne.n	80010e6 <getKeyInput+0xb2>
          		 {
          			subKeyProcess1();
 80010a8:	f7ff ffa0 	bl	8000fec <subKeyProcess1>
          			TimerForKeyPress_1=250;
 80010ac:	4b6c      	ldr	r3, [pc, #432]	; (8001260 <getKeyInput+0x22c>)
 80010ae:	22fa      	movs	r2, #250	; 0xfa
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e018      	b.n	80010e6 <getKeyInput+0xb2>
          		 }

        	 }
        	 else
        	 {
        		 flag_change_state_button1=0;
 80010b4:	4b69      	ldr	r3, [pc, #420]	; (800125c <getKeyInput+0x228>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
        		 TimerForKeyPress_1=250;
 80010ba:	4b69      	ldr	r3, [pc, #420]	; (8001260 <getKeyInput+0x22c>)
 80010bc:	22fa      	movs	r2, #250	; 0xfa
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e011      	b.n	80010e6 <getKeyInput+0xb2>
        	 }
         }
         else
         {
        	 TimerForKeyPress_1--;
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <getKeyInput+0x22c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	4a65      	ldr	r2, [pc, #404]	; (8001260 <getKeyInput+0x22c>)
 80010ca:	6013      	str	r3, [r2, #0]
        	 if(TimerForKeyPress_1==0)
 80010cc:	4b64      	ldr	r3, [pc, #400]	; (8001260 <getKeyInput+0x22c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d108      	bne.n	80010e6 <getKeyInput+0xb2>
        	 {
        		 KeyReg3=NORMAL_STATE;  // 1
 80010d4:	4b60      	ldr	r3, [pc, #384]	; (8001258 <getKeyInput+0x224>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
        		 TimerForKeyPress_1=250;
 80010da:	4b61      	ldr	r3, [pc, #388]	; (8001260 <getKeyInput+0x22c>)
 80010dc:	22fa      	movs	r2, #250	; 0xfa
 80010de:	601a      	str	r2, [r3, #0]
        		 flag_change_state_button1=1;
 80010e0:	4b5e      	ldr	r3, [pc, #376]	; (800125c <getKeyInput+0x228>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
        	 }
         }
   }
     KeyReg4=KeyReg5;   // NORMAL_STATE  //1
 80010e6:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <getKeyInput+0x230>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a5f      	ldr	r2, [pc, #380]	; (8001268 <getKeyInput+0x234>)
 80010ec:	6013      	str	r3, [r2, #0]
     KeyReg5=KeyReg6;   // NORMAL_STATE  //1
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <getKeyInput+0x238>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a5c      	ldr	r2, [pc, #368]	; (8001264 <getKeyInput+0x230>)
 80010f4:	6013      	str	r3, [r2, #0]
     KeyReg6=HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin); // state1= 1= normal
 80010f6:	2102      	movs	r1, #2
 80010f8:	4856      	ldr	r0, [pc, #344]	; (8001254 <getKeyInput+0x220>)
 80010fa:	f000 fd75 	bl	8001be8 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b5a      	ldr	r3, [pc, #360]	; (800126c <getKeyInput+0x238>)
 8001104:	601a      	str	r2, [r3, #0]
     if((KeyReg4==KeyReg5) && (KeyReg5==KeyReg6))  // NORMAL
 8001106:	4b58      	ldr	r3, [pc, #352]	; (8001268 <getKeyInput+0x234>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b56      	ldr	r3, [pc, #344]	; (8001264 <getKeyInput+0x230>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d140      	bne.n	8001194 <getKeyInput+0x160>
 8001112:	4b54      	ldr	r3, [pc, #336]	; (8001264 <getKeyInput+0x230>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b55      	ldr	r3, [pc, #340]	; (800126c <getKeyInput+0x238>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d13a      	bne.n	8001194 <getKeyInput+0x160>
     {
           if(KeyReg7 != KeyReg6)  // Nhan tha
 800111e:	4b54      	ldr	r3, [pc, #336]	; (8001270 <getKeyInput+0x23c>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b52      	ldr	r3, [pc, #328]	; (800126c <getKeyInput+0x238>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d022      	beq.n	8001170 <getKeyInput+0x13c>
           {
          	 KeyReg7 = KeyReg6;  // KeyReg3 = NORMAL
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <getKeyInput+0x238>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a50      	ldr	r2, [pc, #320]	; (8001270 <getKeyInput+0x23c>)
 8001130:	6013      	str	r3, [r2, #0]
          	 if(KeyReg6==PRESSED_STATE)   // PRESSED_STATE = 0: LED_ON
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <getKeyInput+0x238>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d113      	bne.n	8001162 <getKeyInput+0x12e>
          	 {
          		    //TODO
          		 if(flag_change_state_button2==0)
 800113a:	4b4e      	ldr	r3, [pc, #312]	; (8001274 <getKeyInput+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <getKeyInput+0x11a>
          		 {
              		 subKeyProcess2();
 8001142:	f7ff ff5f 	bl	8001004 <subKeyProcess2>
              		 TimerForKeyPress_2=250;
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <getKeyInput+0x244>)
 8001148:	22fa      	movs	r2, #250	; 0xfa
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e022      	b.n	8001194 <getKeyInput+0x160>
          		 }
          		 else if(flag_change_state_button2==1)
 800114e:	4b49      	ldr	r3, [pc, #292]	; (8001274 <getKeyInput+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d11e      	bne.n	8001194 <getKeyInput+0x160>
          		 {
          			subKeyProcess2();
 8001156:	f7ff ff55 	bl	8001004 <subKeyProcess2>
          			TimerForKeyPress_2=250;
 800115a:	4b47      	ldr	r3, [pc, #284]	; (8001278 <getKeyInput+0x244>)
 800115c:	22fa      	movs	r2, #250	; 0xfa
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e018      	b.n	8001194 <getKeyInput+0x160>
          		 }
          	 }
          	 else
          	 {
          		flag_change_state_button2=0;
 8001162:	4b44      	ldr	r3, [pc, #272]	; (8001274 <getKeyInput+0x240>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
          		TimerForKeyPress_2=250;
 8001168:	4b43      	ldr	r3, [pc, #268]	; (8001278 <getKeyInput+0x244>)
 800116a:	22fa      	movs	r2, #250	; 0xfa
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e011      	b.n	8001194 <getKeyInput+0x160>

          	 }
           }
           else  // KeyREg3= KeyReg2
           {
          	 TimerForKeyPress_2--;
 8001170:	4b41      	ldr	r3, [pc, #260]	; (8001278 <getKeyInput+0x244>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3b01      	subs	r3, #1
 8001176:	4a40      	ldr	r2, [pc, #256]	; (8001278 <getKeyInput+0x244>)
 8001178:	6013      	str	r3, [r2, #0]
          	 if(TimerForKeyPress_2==0)
 800117a:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <getKeyInput+0x244>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d108      	bne.n	8001194 <getKeyInput+0x160>
          	 {
          		 KeyReg7=NORMAL_STATE;  // 1
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <getKeyInput+0x23c>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
          		 TimerForKeyPress_2=250;
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <getKeyInput+0x244>)
 800118a:	22fa      	movs	r2, #250	; 0xfa
 800118c:	601a      	str	r2, [r3, #0]
          		 flag_change_state_button2 =1;
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <getKeyInput+0x240>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
          	 }
           }
     }
          KeyReg8=KeyReg9;   // NORMAL_STATE  //1
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <getKeyInput+0x248>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a39      	ldr	r2, [pc, #228]	; (8001280 <getKeyInput+0x24c>)
 800119a:	6013      	str	r3, [r2, #0]
          KeyReg9=KeyReg10;   // NORMAL_STATE  //1
 800119c:	4b39      	ldr	r3, [pc, #228]	; (8001284 <getKeyInput+0x250>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a36      	ldr	r2, [pc, #216]	; (800127c <getKeyInput+0x248>)
 80011a2:	6013      	str	r3, [r2, #0]
          KeyReg10=HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80011a4:	2104      	movs	r1, #4
 80011a6:	482b      	ldr	r0, [pc, #172]	; (8001254 <getKeyInput+0x220>)
 80011a8:	f000 fd1e 	bl	8001be8 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b34      	ldr	r3, [pc, #208]	; (8001284 <getKeyInput+0x250>)
 80011b2:	601a      	str	r2, [r3, #0]
          if((KeyReg8==KeyReg9) && (KeyReg9==KeyReg10))  // NORMAL
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <getKeyInput+0x24c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <getKeyInput+0x248>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d140      	bne.n	8001242 <getKeyInput+0x20e>
 80011c0:	4b2e      	ldr	r3, [pc, #184]	; (800127c <getKeyInput+0x248>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <getKeyInput+0x250>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d13a      	bne.n	8001242 <getKeyInput+0x20e>
          {
                if(KeyReg11 != KeyReg10)  // Nhan tha
 80011cc:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <getKeyInput+0x254>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <getKeyInput+0x250>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d022      	beq.n	800121e <getKeyInput+0x1ea>
                {
               	 KeyReg11 = KeyReg10;  // KeyReg3 = NORMAL
 80011d8:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <getKeyInput+0x250>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a2a      	ldr	r2, [pc, #168]	; (8001288 <getKeyInput+0x254>)
 80011de:	6013      	str	r3, [r2, #0]
               	 if(KeyReg10==PRESSED_STATE)   // PRESSED_STATE = 0: LED_ON
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <getKeyInput+0x250>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d113      	bne.n	8001210 <getKeyInput+0x1dc>
               	 {
               		    //TODO
              		 if(flag_change_state_button3==0)
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <getKeyInput+0x258>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <getKeyInput+0x1c8>
              		 {
                  		 subKeyProcess3();
 80011f0:	f7ff ff14 	bl	800101c <subKeyProcess3>
                  		 TimerForKeyPress_3=250;
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <getKeyInput+0x25c>)
 80011f6:	22fa      	movs	r2, #250	; 0xfa
 80011f8:	601a      	str	r2, [r3, #0]
               		 TimerForKeyPress_3=250;
               		flag_change_state_button3 =1;
               	 }
                }
          }
}
 80011fa:	e022      	b.n	8001242 <getKeyInput+0x20e>
              		 else if(flag_change_state_button3==1)
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <getKeyInput+0x258>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d11e      	bne.n	8001242 <getKeyInput+0x20e>
              			subKeyProcess3();
 8001204:	f7ff ff0a 	bl	800101c <subKeyProcess3>
              			TimerForKeyPress_3=250;
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <getKeyInput+0x25c>)
 800120a:	22fa      	movs	r2, #250	; 0xfa
 800120c:	601a      	str	r2, [r3, #0]
}
 800120e:	e018      	b.n	8001242 <getKeyInput+0x20e>
               		TimerForKeyPress_3=250;
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <getKeyInput+0x25c>)
 8001212:	22fa      	movs	r2, #250	; 0xfa
 8001214:	601a      	str	r2, [r3, #0]
               		flag_change_state_button3=0;
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <getKeyInput+0x258>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	e011      	b.n	8001242 <getKeyInput+0x20e>
               	  TimerForKeyPress_3--;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <getKeyInput+0x25c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3b01      	subs	r3, #1
 8001224:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <getKeyInput+0x25c>)
 8001226:	6013      	str	r3, [r2, #0]
               	 if(TimerForKeyPress_3 == 0)
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <getKeyInput+0x25c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d108      	bne.n	8001242 <getKeyInput+0x20e>
               		 KeyReg11=NORMAL_STATE;  // 1
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <getKeyInput+0x254>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
               		 TimerForKeyPress_3=250;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <getKeyInput+0x25c>)
 8001238:	22fa      	movs	r2, #250	; 0xfa
 800123a:	601a      	str	r2, [r3, #0]
               		flag_change_state_button3 =1;
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <getKeyInput+0x258>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000040 	.word	0x20000040
 800124c:	2000003c 	.word	0x2000003c
 8001250:	20000044 	.word	0x20000044
 8001254:	40010c00 	.word	0x40010c00
 8001258:	20000048 	.word	0x20000048
 800125c:	200000bc 	.word	0x200000bc
 8001260:	200000b0 	.word	0x200000b0
 8001264:	20000050 	.word	0x20000050
 8001268:	2000004c 	.word	0x2000004c
 800126c:	20000054 	.word	0x20000054
 8001270:	20000058 	.word	0x20000058
 8001274:	200000c0 	.word	0x200000c0
 8001278:	200000b4 	.word	0x200000b4
 800127c:	20000060 	.word	0x20000060
 8001280:	2000005c 	.word	0x2000005c
 8001284:	20000064 	.word	0x20000064
 8001288:	20000068 	.word	0x20000068
 800128c:	200000c4 	.word	0x200000c4
 8001290:	200000b8 	.word	0x200000b8

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001298:	f000 f9bc 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129c:	f000 f80a 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a0:	f000 f890 	bl	80013c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012a4:	f000 f842 	bl	800132c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 80012a8:	4801      	ldr	r0, [pc, #4]	; (80012b0 <main+0x1c>)
 80012aa:	f001 f91d 	bl	80024e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <main+0x1a>
 80012b0:	200000c8 	.word	0x200000c8

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b090      	sub	sp, #64	; 0x40
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	2228      	movs	r2, #40	; 0x28
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fcc8 	bl	8002c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012da:	2301      	movs	r3, #1
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012de:	2310      	movs	r3, #16
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fcc4 	bl	8001c78 <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012f6:	f000 f8d3 	bl	80014a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f000 ff30 	bl	8002178 <HAL_RCC_ClockConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800131e:	f000 f8bf 	bl	80014a0 <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3740      	adds	r7, #64	; 0x40
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	463b      	mov	r3, r7
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_TIM2_Init+0x94>)
 800134a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MX_TIM2_Init+0x94>)
 8001352:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001356:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <MX_TIM2_Init+0x94>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_TIM2_Init+0x94>)
 8001360:	2201      	movs	r2, #1
 8001362:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <MX_TIM2_Init+0x94>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <MX_TIM2_Init+0x94>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <MX_TIM2_Init+0x94>)
 8001372:	f001 f869 	bl	8002448 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800137c:	f000 f890 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	4619      	mov	r1, r3
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_TIM2_Init+0x94>)
 800138e:	f001 f9ff 	bl	8002790 <HAL_TIM_ConfigClockSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001398:	f000 f882 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_TIM2_Init+0x94>)
 80013aa:	f001 fbc7 	bl	8002b3c <HAL_TIMEx_MasterConfigSynchronization>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013b4:	f000 f874 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200000c8 	.word	0x200000c8

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <MX_GPIO_Init+0xb8>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a27      	ldr	r2, [pc, #156]	; (800147c <MX_GPIO_Init+0xb8>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <MX_GPIO_Init+0xb8>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_GPIO_Init+0xb8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a21      	ldr	r2, [pc, #132]	; (800147c <MX_GPIO_Init+0xb8>)
 80013f6:	f043 0308 	orr.w	r3, r3, #8
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <MX_GPIO_Init+0xb8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001408:	2200      	movs	r2, #0
 800140a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 800140e:	481c      	ldr	r0, [pc, #112]	; (8001480 <MX_GPIO_Init+0xbc>)
 8001410:	f000 fc01 	bl	8001c16 <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|SEG7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN8_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 800141a:	481a      	ldr	r0, [pc, #104]	; (8001484 <MX_GPIO_Init+0xc0>)
 800141c:	f000 fbfb 	bl	8001c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin SEG7_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001420:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8001424:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|SEG7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2302      	movs	r3, #2
 8001430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	4619      	mov	r1, r3
 8001438:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_GPIO_Init+0xbc>)
 800143a:	f000 fa5b 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 800143e:	2307      	movs	r3, #7
 8001440:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001446:	2301      	movs	r3, #1
 8001448:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	4619      	mov	r1, r3
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <MX_GPIO_Init+0xc0>)
 8001452:	f000 fa4f 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN8_Pin EN1_Pin EN2_Pin EN3_Pin
                           EN4_Pin EN5_Pin EN6_Pin EN7_Pin */
  GPIO_InitStruct.Pin = EN8_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001456:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 800145a:	60bb      	str	r3, [r7, #8]
                          |EN4_Pin|EN5_Pin|EN6_Pin|EN7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2302      	movs	r3, #2
 8001466:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_GPIO_Init+0xc0>)
 8001470:	f000 fa40 	bl	80018f4 <HAL_GPIO_Init>

}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000
 8001480:	40010800 	.word	0x40010800
 8001484:	40010c00 	.word	0x40010c00

08001488 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    //timerRun();
	// button_reading();
	getKeyInput();
 8001490:	f7ff fdd0 	bl	8001034 <getKeyInput>
	 fsm_processing();
 8001494:	f7ff fc54 	bl	8000d40 <fsm_processing>
	// button_reading();
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <Error_Handler+0x8>
	...

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_MspInit+0x5c>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <HAL_MspInit+0x5c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6193      	str	r3, [r2, #24]
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_MspInit+0x5c>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_MspInit+0x5c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_MspInit+0x5c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_MspInit+0x5c>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_MspInit+0x60>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_MspInit+0x60>)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000

08001510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001520:	d113      	bne.n	800154a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_TIM_Base_MspInit+0x44>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_Base_MspInit+0x44>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_TIM_Base_MspInit+0x44>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	201c      	movs	r0, #28
 8001540:	f000 f9a1 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001544:	201c      	movs	r0, #28
 8001546:	f000 f9ba 	bl	80018be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159e:	f000 f87f 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <TIM2_IRQHandler+0x10>)
 80015ae:	f000 ffe7 	bl	8002580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200000c8 	.word	0x200000c8

080015bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	; (800160c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ee:	f7ff ffe5 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f001 fb0d 	bl	8002c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f6:	f7ff fe4d 	bl	8001294 <main>
  bx lr
 80015fa:	4770      	bx	lr
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001604:	08002ca8 	.word	0x08002ca8
  ldr r2, =_sbss
 8001608:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800160c:	20000114 	.word	0x20000114

08001610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_2_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_Init+0x28>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_Init+0x28>)
 800161e:	f043 0310 	orr.w	r3, r3, #16
 8001622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f923 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	200f      	movs	r0, #15
 800162c:	f000 f808 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff ff3c 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40022000 	.word	0x40022000

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f93b 	bl	80018da <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f903 	bl	8001886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000006c 	.word	0x2000006c
 8001698:	20000074 	.word	0x20000074
 800169c:	20000070 	.word	0x20000070

080016a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_IncTick+0x1c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_IncTick+0x20>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_IncTick+0x20>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000074 	.word	0x20000074
 80016c0:	20000110 	.word	0x20000110

080016c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <HAL_GetTick+0x10>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000110 	.word	0x20000110

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <__NVIC_SetPriorityGrouping+0x44>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170a:	4a04      	ldr	r2, [pc, #16]	; (800171c <__NVIC_SetPriorityGrouping+0x44>)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	60d3      	str	r3, [r2, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4906      	ldr	r1, [pc, #24]	; (8001770 <__NVIC_EnableIRQ+0x34>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f7ff ff90 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff2d 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001898:	f7ff ff42 	bl	8001720 <__NVIC_GetPriorityGrouping>
 800189c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	6978      	ldr	r0, [r7, #20]
 80018a4:	f7ff ff90 	bl	80017c8 <NVIC_EncodePriority>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff5f 	bl	8001774 <__NVIC_SetPriority>
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff35 	bl	800173c <__NVIC_EnableIRQ>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffa2 	bl	800182c <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b08b      	sub	sp, #44	; 0x2c
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001906:	e148      	b.n	8001b9a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001908:	2201      	movs	r2, #1
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 8137 	bne.w	8001b94 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4aa3      	ldr	r2, [pc, #652]	; (8001bb8 <HAL_GPIO_Init+0x2c4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d05e      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001930:	4aa1      	ldr	r2, [pc, #644]	; (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d875      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 8001936:	4aa1      	ldr	r2, [pc, #644]	; (8001bbc <HAL_GPIO_Init+0x2c8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d058      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 800193c:	4a9f      	ldr	r2, [pc, #636]	; (8001bbc <HAL_GPIO_Init+0x2c8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d86f      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 8001942:	4a9f      	ldr	r2, [pc, #636]	; (8001bc0 <HAL_GPIO_Init+0x2cc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d052      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001948:	4a9d      	ldr	r2, [pc, #628]	; (8001bc0 <HAL_GPIO_Init+0x2cc>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d869      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 800194e:	4a9d      	ldr	r2, [pc, #628]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d04c      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001954:	4a9b      	ldr	r2, [pc, #620]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d863      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 800195a:	4a9b      	ldr	r2, [pc, #620]	; (8001bc8 <HAL_GPIO_Init+0x2d4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d046      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001960:	4a99      	ldr	r2, [pc, #612]	; (8001bc8 <HAL_GPIO_Init+0x2d4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d85d      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 8001966:	2b12      	cmp	r3, #18
 8001968:	d82a      	bhi.n	80019c0 <HAL_GPIO_Init+0xcc>
 800196a:	2b12      	cmp	r3, #18
 800196c:	d859      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 800196e:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <HAL_GPIO_Init+0x80>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	080019ef 	.word	0x080019ef
 8001978:	080019c9 	.word	0x080019c9
 800197c:	080019db 	.word	0x080019db
 8001980:	08001a1d 	.word	0x08001a1d
 8001984:	08001a23 	.word	0x08001a23
 8001988:	08001a23 	.word	0x08001a23
 800198c:	08001a23 	.word	0x08001a23
 8001990:	08001a23 	.word	0x08001a23
 8001994:	08001a23 	.word	0x08001a23
 8001998:	08001a23 	.word	0x08001a23
 800199c:	08001a23 	.word	0x08001a23
 80019a0:	08001a23 	.word	0x08001a23
 80019a4:	08001a23 	.word	0x08001a23
 80019a8:	08001a23 	.word	0x08001a23
 80019ac:	08001a23 	.word	0x08001a23
 80019b0:	08001a23 	.word	0x08001a23
 80019b4:	08001a23 	.word	0x08001a23
 80019b8:	080019d1 	.word	0x080019d1
 80019bc:	080019e5 	.word	0x080019e5
 80019c0:	4a82      	ldr	r2, [pc, #520]	; (8001bcc <HAL_GPIO_Init+0x2d8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019c6:	e02c      	b.n	8001a22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e029      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	3304      	adds	r3, #4
 80019d6:	623b      	str	r3, [r7, #32]
          break;
 80019d8:	e024      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	3308      	adds	r3, #8
 80019e0:	623b      	str	r3, [r7, #32]
          break;
 80019e2:	e01f      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	330c      	adds	r3, #12
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e01a      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d102      	bne.n	80019fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019f6:	2304      	movs	r3, #4
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e013      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d105      	bne.n	8001a10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a04:	2308      	movs	r3, #8
 8001a06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	611a      	str	r2, [r3, #16]
          break;
 8001a0e:	e009      	b.n	8001a24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a10:	2308      	movs	r3, #8
 8001a12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	615a      	str	r2, [r3, #20]
          break;
 8001a1a:	e003      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          break;
 8001a22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2bff      	cmp	r3, #255	; 0xff
 8001a28:	d801      	bhi.n	8001a2e <HAL_GPIO_Init+0x13a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	e001      	b.n	8001a32 <HAL_GPIO_Init+0x13e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3304      	adds	r3, #4
 8001a32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2bff      	cmp	r3, #255	; 0xff
 8001a38:	d802      	bhi.n	8001a40 <HAL_GPIO_Init+0x14c>
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_Init+0x152>
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	3b08      	subs	r3, #8
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	210f      	movs	r1, #15
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	401a      	ands	r2, r3
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	431a      	orrs	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8090 	beq.w	8001b94 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a74:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_GPIO_Init+0x2dc>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a55      	ldr	r2, [pc, #340]	; (8001bd0 <HAL_GPIO_Init+0x2dc>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_GPIO_Init+0x2dc>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x2e0>)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a49      	ldr	r2, [pc, #292]	; (8001bd8 <HAL_GPIO_Init+0x2e4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_GPIO_Init+0x1e0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a48      	ldr	r2, [pc, #288]	; (8001bdc <HAL_GPIO_Init+0x2e8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d007      	beq.n	8001ad0 <HAL_GPIO_Init+0x1dc>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a47      	ldr	r2, [pc, #284]	; (8001be0 <HAL_GPIO_Init+0x2ec>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_GPIO_Init+0x1d8>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e004      	b.n	8001ad6 <HAL_GPIO_Init+0x1e2>
 8001acc:	2303      	movs	r3, #3
 8001ace:	e002      	b.n	8001ad6 <HAL_GPIO_Init+0x1e2>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_GPIO_Init+0x1e2>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad8:	f002 0203 	and.w	r2, r2, #3
 8001adc:	0092      	lsls	r2, r2, #2
 8001ade:	4093      	lsls	r3, r2
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae6:	493b      	ldr	r1, [pc, #236]	; (8001bd4 <HAL_GPIO_Init+0x2e0>)
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b00:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4937      	ldr	r1, [pc, #220]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b0e:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4933      	ldr	r1, [pc, #204]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b28:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	492d      	ldr	r1, [pc, #180]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	4929      	ldr	r1, [pc, #164]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4923      	ldr	r1, [pc, #140]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	491f      	ldr	r1, [pc, #124]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	4919      	ldr	r1, [pc, #100]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	4915      	ldr	r1, [pc, #84]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	3301      	adds	r3, #1
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f47f aeaf 	bne.w	8001908 <HAL_GPIO_Init+0x14>
  }
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	372c      	adds	r7, #44	; 0x2c
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	10320000 	.word	0x10320000
 8001bbc:	10310000 	.word	0x10310000
 8001bc0:	10220000 	.word	0x10220000
 8001bc4:	10210000 	.word	0x10210000
 8001bc8:	10120000 	.word	0x10120000
 8001bcc:	10110000 	.word	0x10110000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	40010800 	.word	0x40010800
 8001bdc:	40010c00 	.word	0x40010c00
 8001be0:	40011000 	.word	0x40011000
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e001      	b.n	8001c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]
 8001c22:	4613      	mov	r3, r2
 8001c24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c26:	787b      	ldrb	r3, [r7, #1]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2c:	887a      	ldrh	r2, [r7, #2]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c32:	e003      	b.n	8001c3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	041a      	lsls	r2, r3, #16
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	611a      	str	r2, [r3, #16]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c58:	887a      	ldrh	r2, [r7, #2]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	041a      	lsls	r2, r3, #16
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	400b      	ands	r3, r1
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	611a      	str	r2, [r3, #16]
}
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e26c      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 8087 	beq.w	8001da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c98:	4b92      	ldr	r3, [pc, #584]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d00c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca4:	4b8f      	ldr	r3, [pc, #572]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d112      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x5e>
 8001cb0:	4b8c      	ldr	r3, [pc, #560]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbe:	4b89      	ldr	r3, [pc, #548]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d06c      	beq.n	8001da4 <HAL_RCC_OscConfig+0x12c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d168      	bne.n	8001da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e246      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x76>
 8001ce0:	4b80      	ldr	r3, [pc, #512]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a7f      	ldr	r2, [pc, #508]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e02e      	b.n	8001d4c <HAL_RCC_OscConfig+0xd4>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x98>
 8001cf6:	4b7b      	ldr	r3, [pc, #492]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7a      	ldr	r2, [pc, #488]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4b78      	ldr	r3, [pc, #480]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a77      	ldr	r2, [pc, #476]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e01d      	b.n	8001d4c <HAL_RCC_OscConfig+0xd4>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0xbc>
 8001d1a:	4b72      	ldr	r3, [pc, #456]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a71      	ldr	r2, [pc, #452]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6e      	ldr	r2, [pc, #440]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0xd4>
 8001d34:	4b6b      	ldr	r3, [pc, #428]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a6a      	ldr	r2, [pc, #424]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b68      	ldr	r3, [pc, #416]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a67      	ldr	r2, [pc, #412]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fcb6 	bl	80016c4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fcb2 	bl	80016c4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1fa      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0xe4>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fca2 	bl	80016c4 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fc9e 	bl	80016c4 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1e6      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x10c>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dbe:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d11c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x18c>
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x176>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e1ba      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4939      	ldr	r1, [pc, #228]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7ff fc57 	bl	80016c4 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fc53 	bl	80016c4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e19b      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4927      	ldr	r1, [pc, #156]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_RCC_OscConfig+0x270>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fc36 	bl	80016c4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fc32 	bl	80016c4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e17a      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d03a      	beq.n	8001efc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d019      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7ff fc16 	bl	80016c4 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fc12 	bl	80016c4 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e15a      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 faa6 	bl	800240c <RCC_Delay>
 8001ec0:	e01c      	b.n	8001efc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec8:	f7ff fbfc 	bl	80016c4 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ece:	e00f      	b.n	8001ef0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fbf8 	bl	80016c4 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d908      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e140      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	42420000 	.word	0x42420000
 8001eec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef0:	4b9e      	ldr	r3, [pc, #632]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e9      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80a6 	beq.w	8002056 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0e:	4b97      	ldr	r3, [pc, #604]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10d      	bne.n	8001f36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	4b94      	ldr	r3, [pc, #592]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a93      	ldr	r2, [pc, #588]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	61d3      	str	r3, [r2, #28]
 8001f26:	4b91      	ldr	r3, [pc, #580]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	4b8e      	ldr	r3, [pc, #568]	; (8002170 <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d118      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f42:	4b8b      	ldr	r3, [pc, #556]	; (8002170 <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a8a      	ldr	r2, [pc, #552]	; (8002170 <HAL_RCC_OscConfig+0x4f8>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fbb9 	bl	80016c4 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f56:	f7ff fbb5 	bl	80016c4 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b64      	cmp	r3, #100	; 0x64
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0fd      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	4b81      	ldr	r3, [pc, #516]	; (8002170 <HAL_RCC_OscConfig+0x4f8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x312>
 8001f7c:	4b7b      	ldr	r3, [pc, #492]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a7a      	ldr	r2, [pc, #488]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	e02d      	b.n	8001fe6 <HAL_RCC_OscConfig+0x36e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x334>
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a75      	ldr	r2, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	4b73      	ldr	r3, [pc, #460]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a72      	ldr	r2, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	f023 0304 	bic.w	r3, r3, #4
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	e01c      	b.n	8001fe6 <HAL_RCC_OscConfig+0x36e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_OscConfig+0x356>
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a6c      	ldr	r2, [pc, #432]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	4b6a      	ldr	r3, [pc, #424]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a69      	ldr	r2, [pc, #420]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	e00b      	b.n	8001fe6 <HAL_RCC_OscConfig+0x36e>
 8001fce:	4b67      	ldr	r3, [pc, #412]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a66      	ldr	r2, [pc, #408]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	6213      	str	r3, [r2, #32]
 8001fda:	4b64      	ldr	r3, [pc, #400]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a63      	ldr	r2, [pc, #396]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d015      	beq.n	800201a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7ff fb69 	bl	80016c4 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff fb65 	bl	80016c4 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e0ab      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200c:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ee      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x37e>
 8002018:	e014      	b.n	8002044 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7ff fb53 	bl	80016c4 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7ff fb4f 	bl	80016c4 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e095      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002038:	4b4c      	ldr	r3, [pc, #304]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1ee      	bne.n	8002022 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d105      	bne.n	8002056 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204a:	4b48      	ldr	r3, [pc, #288]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a47      	ldr	r2, [pc, #284]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8002050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002054:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8081 	beq.w	8002162 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002060:	4b42      	ldr	r3, [pc, #264]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b08      	cmp	r3, #8
 800206a:	d061      	beq.n	8002130 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d146      	bne.n	8002102 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002074:	4b3f      	ldr	r3, [pc, #252]	; (8002174 <HAL_RCC_OscConfig+0x4fc>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7ff fb23 	bl	80016c4 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002082:	f7ff fb1f 	bl	80016c4 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e067      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002094:	4b35      	ldr	r3, [pc, #212]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d108      	bne.n	80020bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	492d      	ldr	r1, [pc, #180]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a19      	ldr	r1, [r3, #32]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	430b      	orrs	r3, r1
 80020ce:	4927      	ldr	r1, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <HAL_RCC_OscConfig+0x4fc>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7ff faf3 	bl	80016c4 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e2:	f7ff faef 	bl	80016c4 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e037      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f4:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x46a>
 8002100:	e02f      	b.n	8002162 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_RCC_OscConfig+0x4fc>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fadc 	bl	80016c4 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff fad8 	bl	80016c4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e020      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x498>
 800212e:	e018      	b.n	8002162 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e013      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	429a      	cmp	r2, r3
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	40007000 	.word	0x40007000
 8002174:	42420060 	.word	0x42420060

08002178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0d0      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d910      	bls.n	80021bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b67      	ldr	r3, [pc, #412]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 0207 	bic.w	r2, r3, #7
 80021a2:	4965      	ldr	r1, [pc, #404]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0b8      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d020      	beq.n	800220a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d4:	4b59      	ldr	r3, [pc, #356]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a52      	ldr	r2, [pc, #328]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b50      	ldr	r3, [pc, #320]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	494d      	ldr	r1, [pc, #308]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d040      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d115      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e07f      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e073      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b3d      	ldr	r3, [pc, #244]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06b      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4936      	ldr	r1, [pc, #216]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7ff fa2c 	bl	80016c4 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7ff fa28 	bl	80016c4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e053      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d210      	bcs.n	80022c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 0207 	bic.w	r2, r3, #7
 80022ae:	4922      	ldr	r1, [pc, #136]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e032      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4916      	ldr	r1, [pc, #88]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	490e      	ldr	r1, [pc, #56]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002306:	f000 f821 	bl	800234c <HAL_RCC_GetSysClockFreq>
 800230a:	4602      	mov	r2, r0
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	490a      	ldr	r1, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	5ccb      	ldrb	r3, [r1, r3]
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	4a09      	ldr	r2, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1cc>)
 8002320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x1d0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f98a 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40022000 	.word	0x40022000
 800233c:	40021000 	.word	0x40021000
 8002340:	08002c90 	.word	0x08002c90
 8002344:	2000006c 	.word	0x2000006c
 8002348:	20000070 	.word	0x20000070

0800234c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800234c:	b490      	push	{r4, r7}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002354:	1d3c      	adds	r4, r7, #4
 8002356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800235c:	f240 2301 	movw	r3, #513	; 0x201
 8002360:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b04      	cmp	r3, #4
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x40>
 8002386:	2b08      	cmp	r3, #8
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0x46>
 800238a:	e02d      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCC_GetSysClockFreq+0xb8>)
 800238e:	623b      	str	r3, [r7, #32]
      break;
 8002390:	e02d      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	0c9b      	lsrs	r3, r3, #18
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800239e:	4413      	add	r3, r2
 80023a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	0c5b      	lsrs	r3, r3, #17
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023be:	4413      	add	r3, r2
 80023c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ca:	fb02 f203 	mul.w	r2, r2, r3
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
 80023d6:	e004      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023dc:	fb02 f303 	mul.w	r3, r2, r3
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	623b      	str	r3, [r7, #32]
      break;
 80023e6:	e002      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ea:	623b      	str	r3, [r7, #32]
      break;
 80023ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ee:	6a3b      	ldr	r3, [r7, #32]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3728      	adds	r7, #40	; 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc90      	pop	{r4, r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	08002c80 	.word	0x08002c80
 8002400:	40021000 	.word	0x40021000
 8002404:	007a1200 	.word	0x007a1200
 8002408:	003d0900 	.word	0x003d0900

0800240c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <RCC_Delay+0x34>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <RCC_Delay+0x38>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002428:	bf00      	nop
  }
  while (Delay --);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	60fa      	str	r2, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f9      	bne.n	8002428 <RCC_Delay+0x1c>
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	2000006c 	.word	0x2000006c
 8002444:	10624dd3 	.word	0x10624dd3

08002448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e041      	b.n	80024de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff f84e 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3304      	adds	r3, #4
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f000 fa6a 	bl	8002960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d001      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e035      	b.n	800256c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a16      	ldr	r2, [pc, #88]	; (8002578 <HAL_TIM_Base_Start_IT+0x90>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d009      	beq.n	8002536 <HAL_TIM_Base_Start_IT+0x4e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252a:	d004      	beq.n	8002536 <HAL_TIM_Base_Start_IT+0x4e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a12      	ldr	r2, [pc, #72]	; (800257c <HAL_TIM_Base_Start_IT+0x94>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d111      	bne.n	800255a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b06      	cmp	r3, #6
 8002546:	d010      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002558:	e007      	b.n	800256a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40000400 	.word	0x40000400

08002580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b02      	cmp	r3, #2
 8002594:	d122      	bne.n	80025dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d11b      	bne.n	80025dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0202 	mvn.w	r2, #2
 80025ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f9b1 	bl	800292a <HAL_TIM_IC_CaptureCallback>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f9a4 	bl	8002918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f9b3 	bl	800293c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d122      	bne.n	8002630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d11b      	bne.n	8002630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0204 	mvn.w	r2, #4
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2202      	movs	r2, #2
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f987 	bl	800292a <HAL_TIM_IC_CaptureCallback>
 800261c:	e005      	b.n	800262a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f97a 	bl	8002918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f989 	bl	800293c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b08      	cmp	r3, #8
 800263c:	d122      	bne.n	8002684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b08      	cmp	r3, #8
 800264a:	d11b      	bne.n	8002684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0208 	mvn.w	r2, #8
 8002654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2204      	movs	r2, #4
 800265a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f95d 	bl	800292a <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f950 	bl	8002918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f95f 	bl	800293c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b10      	cmp	r3, #16
 8002690:	d122      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b10      	cmp	r3, #16
 800269e:	d11b      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0210 	mvn.w	r2, #16
 80026a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2208      	movs	r2, #8
 80026ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f933 	bl	800292a <HAL_TIM_IC_CaptureCallback>
 80026c4:	e005      	b.n	80026d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f926 	bl	8002918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f935 	bl	800293c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d107      	bne.n	8002704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0201 	mvn.w	r2, #1
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe fec2 	bl	8001488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	2b80      	cmp	r3, #128	; 0x80
 8002710:	d10e      	bne.n	8002730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271c:	2b80      	cmp	r3, #128	; 0x80
 800271e:	d107      	bne.n	8002730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fa67 	bl	8002bfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	d10e      	bne.n	800275c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d107      	bne.n	800275c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f8f9 	bl	800294e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b20      	cmp	r3, #32
 8002768:	d10e      	bne.n	8002788 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b20      	cmp	r3, #32
 8002776:	d107      	bne.n	8002788 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0220 	mvn.w	r2, #32
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fa32 	bl	8002bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_TIM_ConfigClockSource+0x18>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e0b3      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x180>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e0:	d03e      	beq.n	8002860 <HAL_TIM_ConfigClockSource+0xd0>
 80027e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e6:	f200 8087 	bhi.w	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ee:	f000 8085 	beq.w	80028fc <HAL_TIM_ConfigClockSource+0x16c>
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f6:	d87f      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 80027f8:	2b70      	cmp	r3, #112	; 0x70
 80027fa:	d01a      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0xa2>
 80027fc:	2b70      	cmp	r3, #112	; 0x70
 80027fe:	d87b      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002800:	2b60      	cmp	r3, #96	; 0x60
 8002802:	d050      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x116>
 8002804:	2b60      	cmp	r3, #96	; 0x60
 8002806:	d877      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002808:	2b50      	cmp	r3, #80	; 0x50
 800280a:	d03c      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0xf6>
 800280c:	2b50      	cmp	r3, #80	; 0x50
 800280e:	d873      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d058      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x136>
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d86f      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002818:	2b30      	cmp	r3, #48	; 0x30
 800281a:	d064      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x156>
 800281c:	2b30      	cmp	r3, #48	; 0x30
 800281e:	d86b      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002820:	2b20      	cmp	r3, #32
 8002822:	d060      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x156>
 8002824:	2b20      	cmp	r3, #32
 8002826:	d867      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002828:	2b00      	cmp	r3, #0
 800282a:	d05c      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x156>
 800282c:	2b10      	cmp	r3, #16
 800282e:	d05a      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002830:	e062      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6899      	ldr	r1, [r3, #8]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f000 f95c 	bl	8002afe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002854:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	609a      	str	r2, [r3, #8]
      break;
 800285e:	e04e      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6899      	ldr	r1, [r3, #8]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f000 f945 	bl	8002afe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002882:	609a      	str	r2, [r3, #8]
      break;
 8002884:	e03b      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	461a      	mov	r2, r3
 8002894:	f000 f8bc 	bl	8002a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2150      	movs	r1, #80	; 0x50
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f913 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 80028a4:	e02b      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f000 f8da 	bl	8002a6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2160      	movs	r1, #96	; 0x60
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f903 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 80028c4:	e01b      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f000 f89c 	bl	8002a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2140      	movs	r1, #64	; 0x40
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f8f3 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 80028e4:	e00b      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f000 f8ea 	bl	8002aca <TIM_ITRx_SetConfig>
        break;
 80028f6:	e002      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028f8:	bf00      	nop
 80028fa:	e000      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <TIM_Base_SetConfig+0xa8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d007      	beq.n	8002988 <TIM_Base_SetConfig+0x28>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297e:	d003      	beq.n	8002988 <TIM_Base_SetConfig+0x28>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <TIM_Base_SetConfig+0xac>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d108      	bne.n	800299a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <TIM_Base_SetConfig+0xa8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d007      	beq.n	80029b2 <TIM_Base_SetConfig+0x52>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a8:	d003      	beq.n	80029b2 <TIM_Base_SetConfig+0x52>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <TIM_Base_SetConfig+0xac>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d108      	bne.n	80029c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <TIM_Base_SetConfig+0xa8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d103      	bne.n	80029f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	615a      	str	r2, [r3, #20]
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40000400 	.word	0x40000400

08002a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f023 0201 	bic.w	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f023 030a 	bic.w	r3, r3, #10
 8002a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	621a      	str	r2, [r3, #32]
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f023 0210 	bic.w	r2, r3, #16
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	031b      	lsls	r3, r3, #12
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002aa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	621a      	str	r2, [r3, #32]
}
 8002ac0:	bf00      	nop
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f043 0307 	orr.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	609a      	str	r2, [r3, #8]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b087      	sub	sp, #28
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	021a      	lsls	r2, r3, #8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	609a      	str	r2, [r3, #8]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e041      	b.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d009      	beq.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba0:	d004      	beq.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d10c      	bne.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	40000400 	.word	0x40000400

08002bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <__libc_init_array>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	2600      	movs	r6, #0
 8002c14:	4d0c      	ldr	r5, [pc, #48]	; (8002c48 <__libc_init_array+0x38>)
 8002c16:	4c0d      	ldr	r4, [pc, #52]	; (8002c4c <__libc_init_array+0x3c>)
 8002c18:	1b64      	subs	r4, r4, r5
 8002c1a:	10a4      	asrs	r4, r4, #2
 8002c1c:	42a6      	cmp	r6, r4
 8002c1e:	d109      	bne.n	8002c34 <__libc_init_array+0x24>
 8002c20:	f000 f822 	bl	8002c68 <_init>
 8002c24:	2600      	movs	r6, #0
 8002c26:	4d0a      	ldr	r5, [pc, #40]	; (8002c50 <__libc_init_array+0x40>)
 8002c28:	4c0a      	ldr	r4, [pc, #40]	; (8002c54 <__libc_init_array+0x44>)
 8002c2a:	1b64      	subs	r4, r4, r5
 8002c2c:	10a4      	asrs	r4, r4, #2
 8002c2e:	42a6      	cmp	r6, r4
 8002c30:	d105      	bne.n	8002c3e <__libc_init_array+0x2e>
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
 8002c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c38:	4798      	blx	r3
 8002c3a:	3601      	adds	r6, #1
 8002c3c:	e7ee      	b.n	8002c1c <__libc_init_array+0xc>
 8002c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c42:	4798      	blx	r3
 8002c44:	3601      	adds	r6, #1
 8002c46:	e7f2      	b.n	8002c2e <__libc_init_array+0x1e>
 8002c48:	08002ca0 	.word	0x08002ca0
 8002c4c:	08002ca0 	.word	0x08002ca0
 8002c50:	08002ca0 	.word	0x08002ca0
 8002c54:	08002ca4 	.word	0x08002ca4

08002c58 <memset>:
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4402      	add	r2, r0
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d100      	bne.n	8002c62 <memset+0xa>
 8002c60:	4770      	bx	lr
 8002c62:	f803 1b01 	strb.w	r1, [r3], #1
 8002c66:	e7f9      	b.n	8002c5c <memset+0x4>

08002c68 <_init>:
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6a:	bf00      	nop
 8002c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6e:	bc08      	pop	{r3}
 8002c70:	469e      	mov	lr, r3
 8002c72:	4770      	bx	lr

08002c74 <_fini>:
 8002c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c76:	bf00      	nop
 8002c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7a:	bc08      	pop	{r3}
 8002c7c:	469e      	mov	lr, r3
 8002c7e:	4770      	bx	lr
